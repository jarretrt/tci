target_vals = c(50,50),
target_tms = c(0,10),
obs_tms = obs_tms,
update_tms = update_tms,
seed = 1, delay = 0.5)
# plot results
tms <- seq(0,10,length.out = len)
resp_true <- predict(pkpdmod_true, sim_pkpd$inf,tms)[,5]
resp_prior <- predict(pkpdmod_prior, sim_pkpd$inf,tms)[,5]
resp_post  <- predict(sim_pkpd$pkmod_post, sim_pkpd$inf, tms,
pars_pk = post_pars[1:4], pars_pd = post_pars[5],
sigma_add = post_pars[6])[,5]
resp_post  <- predict(sim_pkpd$pkmod_post, sim_pkpd$inf, tms)[,5]
df <- data.frame(time = rep(tms,3),
value = c(resp_true, resp_prior, resp_post),
model = c(rep("true",len),rep("prior",len),rep("posterior",len)))
ggplot(df, aes(x = time, y = value, color = model)) +
geom_line() +
geom_point(data = sim_pkpd$obs, aes(x = time, y = obs), inherit.aes = FALSE) +
labs(x = "Hours", y = "Bispectral Index") +
geom_vline(xintercept = update_tms, linetype = "dotted", alpha = 0.6) +
geom_step(data = as.data.frame(targets), aes(x = time, y = value), inherit.aes = FALSE)
ggplot(df, aes(x = time, y = value, color = model)) +
geom_line() +
geom_point(data = sim_pkpd$obs, aes(x = time, y = obs), inherit.aes = FALSE) +
labs(x = "Hours", y = "Bispectral Index") +
geom_vline(xintercept = update_tms, linetype = "dotted", alpha = 0.6)
ggplot(df, aes(x = time, y = value, color = model)) +
geom_line() +
geom_point(data = sim_pkpd$obs, aes(x = time, y = obs), inherit.aes = FALSE) +
labs(x = "Hours", y = "Bispectral Index") +
geom_vline(xintercept = update_tms, linetype = "dotted", alpha = 0.6) +
geom_hline(yintercept = 50)
devtools::document()
library(tci)
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
echo = TRUE,
message = FALSE,
warning = FALSE,
fig.align="center",
fig.height= 4,
fig.width = 6
)
# Chunk 2
library(tci)
library(ggplot2)   # ggplot for plotting
library(gridExtra) # arrangeGrob to arrange plots
library(reshape2)  # melt function
# Chunk 4
# 1-compartment model
(mod1cpt <- pkmod(pars_pk = c(cl = 10, v = 15)))
# 3-compartment model with effect site
(mod3ecpt <- pkmod(pars_pk = c(cl = 10, q2 = 2, q3 =20, v = 15, v2 = 30, v3 = 50, ke0 = 1.2)))
# Chunk 5
# acceptable parameter names
list_parnms()
# Chunk 6
update(mod3ecpt, pars_pk = c(ke0 = 0.9), init = c(1,0.2,0.3,1))
# Chunk 7
# single infusion
(single_inf <- inf_manual(inf_tms = 0, duration = 0.5, inf_rate = 100))
# multiple infusions
(multi_inf <- inf_manual(inf_tms = c(0,3,6), duration = c(1,0.5,0.25), inf_rate = 100))
# Chunk 8
# plasma targeting for one-compartment model
inf_1cpt <- inf_tci(target_vals = c(2,3,4,4), target_tms = c(0,2,3,10),
pkmod = mod1cpt, type = "plasma")
head(inf_1cpt)
# effect-site targeting for three-compartment effect site model
inf_3ecpt <- inf_tci(target_vals = c(2,3,4,4), target_tms = c(0,2,3,10),
pkmod = mod3ecpt, type = "effect")
head(inf_3ecpt)
# Chunk 9
# prediction/observation times
tms_pred <- seq(0,10,0.01)
tms_obs <- c(0.5,1,2,4,6,10)
pre <- predict(mod3ecpt, inf = inf_3ecpt, tms = tms_pred)
obs <- simulate(mod3ecpt, seed = 1, inf = inf_3ecpt, tms = tms_obs, sigma_mult = 0.2)
# plot results
dat <- data.frame(time = tms_pred, `plasma (3 cmpt)` = pre[,"c1"],
`effect (ke0=1.2)` = pre[,"c4"],
check.names = FALSE)
datm <- melt(dat, id = "time")
dat_obs <- data.frame(time = tms_obs, con = obs, variable = "plasma (3 cmpt)")
p <- ggplot(datm, aes(x = time, y = value, color = variable)) +
geom_line() +
geom_point(data = dat_obs, aes(x = time, y = con)) +
xlab("Minutes") + ylab("Concentration (mg/L)")
p
# Chunk 10
# evaluate with different ke0 parameter
pre_misspec <- predict(mod3ecpt, inf = inf_3ecpt, tms = tms_pred,
pars_pk = c(ke0 = 0.8))
dat_misspec <- data.frame(pre_misspec, variable = "effect (ke0=0.8)", time = tms_pred)
p + geom_line(data = dat_misspec, aes(x = time, y = c4, color = variable))
# Chunk 11
# predicted concentrations
pre_1cpt <- predict(mod1cpt, inf = inf_3ecpt, tms = tms_pred)
dat_1cpt <- data.frame(pre_1cpt, variable = "plasma (1 cmpt)", time = tms_pred)
# simulated observations
obs_1cpt <- simulate(mod1cpt, seed = 1, inf = inf_3ecpt, tms = tms_obs, sigma_mult = 0.2)
p + geom_line(data = dat_1cpt, aes(x = time, y = c1, color = variable)) +
geom_point(data = data.frame(time = tms_obs, con = obs_1cpt, variable = "plasma (1 cmpt)"),
aes(x = time, y = con), inherit.aes = FALSE, color = "green4")
# Chunk 12
modpd <- update(mod3ecpt, pdfn = emax, pdinv = emax_inv,
pars_pd = c(e0 = 100, emx = 100, c50 = 3.5, gamma = 2.2))
# Chunk 13
inf_pd <- inf_tci(target_vals = c(70,60,50,50), target_tms = c(0,2,3,10), pkmod = modpd, type = "effect")
# Chunk 14
# predict responses
pre_pd <- predict(modpd, inf = inf_pd, tms = tms_pred)
# pd observations: 10 sec = 1/6 min
tms_pd_obs <- seq(1/6,10,1/6)
# simulate responses with additive error and parameter misspecification
obs_pd <- simulate(modpd, seed = 1, inf = inf_pd, tms = tms_pd_obs, sigma_add = 5,
pars_pk = c(ke0 = 0.7), pars_pd = c(c50 = 3, gamma = 1.8))
# plot results
dat_pd <- data.frame(time = tms_pred, `plasma (3 cmpt)` = pre_pd[,"c1"],
`effect (ke0=1.2)` = pre_pd[,"c4"],
BIS = pre_pd[,"pdresp"],
check.names = FALSE)
dat_pdm <- melt(dat_pd, id = "time")
dat_pdm$type <- as.factor(ifelse(dat_pdm$variable == "BIS", "PD","PK"))
dat_pd_obs <- data.frame(time = tms_pd_obs, BIS = obs_pd,
type = factor("PD"), variable = "BIS")
levels(dat_pdm$type) <- levels(dat_pd_obs$type) <- c("Bispectral Index", "Concentration (mg/L)")
ggplot(dat_pdm, aes(x = time, y = value, color = variable)) +
facet_wrap(type~., scales = "free", nrow = 2) +
geom_line() +
geom_point(data = dat_pd_obs, aes(x = time, y = BIS)) +
xlab("Minutes") + ylab("")
# Chunk 15
mod_true  <- update(mod3ecpt, pars_pk = c(cl = 20, q2 = 1.5, ke0 = 1.8))
sim <- simulate_olc(pkmod_prior = mod3ecpt,
pkmod_true = mod_true,
target_vals = c(2,3,4,4),
target_tms = c(0,2,3,24),
obs_tms = c(1,2,4,8,12,16,24),
seed = 1)
resp <- rbind(melt(sim$resp_pred, id.var = "time"),
melt(sim$resp_true, id.var = "time"))
resp$model <- c(rep("Predicted",nrow(resp)/2),rep("True",nrow(resp)/2))
obs <- as.data.frame(cbind(sim$obs, model = "True"))
ggplot(resp) +
geom_line(aes(x = time, y = value, color = variable)) +
facet_wrap(~model) +
geom_point(data = obs, aes(x=time, y = obs), inherit.aes = FALSE)
# Chunk 16
# TCI targets - 3 doses (hour-long infusions) at 24h intervals calculated to
# reach 3 mg/L plasma concentration
target_tms <- c(0,1,24,25,48,49,72)
target_vals <- c(3,0,3,0,3,0,0)
# Chunk 17
# Measurement and model update times
obs_tms <- c(1,2,4,8,12,16,23,25,36,47)
update_tms <- c(24,48)
# Chunk 18
# Omega matrix describing inter-individual variability in prior pkmod object
prior_vcov <- matrix(diag(c(0.265,0.610,0.463)),
3,3, dimnames = list(NULL,c('cl','v','sigma_mult')))
# prior pkmod: 1 compartment model
pkmod_prior <- update(mod1cpt, Omega = prior_vcov, sigma_mult = 0.2)
# true pkmod - 3 compartment model with effect-site
pkmod_true <- update(mod3ecpt, sigma_mult = 0.3)
# run simulation
sim <- simulate_clc(pkmod_prior, pkmod_true, target_vals, target_tms, obs_tms, update_tms,
type = "plasma", seed = 1)
len <- 1e3
tms <- seq(0,48,length.out = len)
# true, prior, posterior plasma concentrations
ctrue <- predict(pkmod_true, sim$inf,tms)[,1]
cprior <- predict(pkmod_prior, sim$inf,tms)[,1]
sim
sim
simulate_clc
# run simulation
sim <- simulate_clc(pkmod_prior, pkmod_true, target_vals, target_tms, obs_tms, update_tms,
type = "plasma", seed = 1)
sim
simulate_clc
devtools::document()
library(tci)
library(tci)
library(mrgsolve) # implement ODE equation
library(xtable)   # printing tables
library(ggplot2)  # plotting results
library(reshape2) # melt function
form <- '
$PARAM V1 = 7.88, V2=23.9, V3=13.8, CL1=5, CL2=0.828, CL3=0.0784,
k10 = 0.172, k12=0.373, k21=0.103, k13=0.0367, k31=0.0124
$CMT A1 A2 A3
$ODE
dxdt_A1 = k21*A2 + k31*A3 - (k12+k13+k10)*A1 - CL1/V1*A1;
dxdt_A2 = k12*A1 - k21*A2 - CL2/V2*A2;
dxdt_A3 = k13*A1 - k31*A3 - CL3/V3*A3;
'
mrg_mod_remif <- mcode("remifentanil", form)
pk_remif <- function(tm, kR, pars, init = c(0,0,0)){
# allow lowercase names
names(pars) <- toupper(names(pars))
# store volume
vols <- pars[c("V1","V2","V3")]
A0 <- init*vols # initial amounts
names(A0) <- c("A1","A2","A3") # names required by mrgsolve
# pass parameters as list
pars <- sapply(pars, as.list)
# update parameters and initial values (as amounts)
mrg_mod_remif <- update(mrg_mod_remif, param = pars, init = A0)
# dosing regimen - mrgsolve function in terms of amount infused
event <- ev(amt =  kR*max(tm), time = 0, tinf = max(tm))
# simulate responses (skip tm=0 unless specified)
dat <- mrgsim_q(x = mrg_mod_remif, # pk model
data = event, # dosing event
stime = tm) # evaluation times
# skip tm=0 unless specified in tm
dat <- dat@data[-1,]
# return concentrations with compartments in rows and times in columns
cons <- t(dat[,c("A1","A2","A3")]) / vols
rownames(cons) <- colnames(cons) <- NULL
return(cons)
}
tab_cascone <- data.frame(Parameter1 = c("$V_1$","$V_2$","$V_3$","$CL_1$",
"$CL_2$","$CL_3$"),
Optimized_val1 = c("7.88 L","23.9 L","13.8 L",
"2.08 L/min","0.828 L/min","0.0784 L/min"),
Parameter2 = c("$k_{10}$","$k_{12}$","$k_{21}$","$k_{13}$","$k_{31}$",""),
Optimized_val2 = c("0.172/min","0.373/min","0.103/min","0.0367/min","0.0124/min",""))
names(tab_cascone) <- c("Parameter", "Optimized value", "Parameter", "Optimized value")
tab_cascone_df <- xtable(tab_cascone,
caption = "Reproduction of Table 1 from Cascone et al. (2013): Values and dimensions of the three-compartmental model parameters.",
label = "tab:Cascone-tab1")
print(tab_cascone_df,
include.rownames = FALSE,
caption.placement = "top",
timestamp = NULL,
booktabs = TRUE,
hline.after = c(-1,0,6),
sanitize.text.function = function(x){x},
include.colnames=TRUE)
dose_remi <- inf_manual(times = 0, infrt = 60, duration = 20)
dose_remi <- inf_manual(inf_tms = 0, inf_rate = 60, duration = 20)
pars_remif <- c(V1 = 7.88, V2=23.9, V3=13.8, CL1=5, CL2=0.828, CL3=0.0784,
k10 = 0.172, k12=0.373, k21=0.103, k13=0.0367, k31=0.0124)
mod_remif <- pkmod(pkfn = pk_remif, pars_pk = pars_remif)
p1 <- predict(mod_remif, inf = dose_remi, tms = 0:80)
ggplot(melt(data.frame(time = 0:80, p1), id = "time"),
aes(x = time, y = value, color = variable)) +
geom_line()
tci_plasma_lim <- function(Ct, pkmod, dtm = 1/6, maxrt = 1200,
lim_amt = 0.5, ecmpt = NULL, tmax_search = 20,
cetol = 0.05, cptol = 0.1, ...){
pkmod <- update(pkmod,...)
# if effect-site concentration is close to target,
# switch to plasma targeting
if(with(pkmod,(Ct - init[ecmpt]) / Ct <  cetol &
(Ct - init[pcmpt])/Ct <= cptol))
return(tci_plasma(Ct, pkmod = pkmod, dtm = dtm, maxrt = maxrt))
# maximum tolerable plasma concentration
Cp_max <- Ct + lim_amt
# infusion required to reach Cp_max
pinf <- tci_plasma(Ct = Cp_max, pkmod = pkmod, dtm = dtm, maxrt = maxrt)
# Administer dtm-minute infusion
unit_inf <- inf_manual(times = 0, infrt = pinf, duration = dtm)
# Calculate maximum effect-site concentration
CeP <- function(tm) predict(pkmod, inf = unit_inf, tms = tm)[,pkmod$ecmpt]
Ce_max <- optimize(CeP, c(0,20), maximum = TRUE)$objective
# if max Ce < Ct administer infusion to reach maximum target
if(Ce_max <= Ct + cetol*Ct)
infrt <- pinf
else
infrt <- tci_effect_only(Ct, pkmod, dtm, maxrt = maxrt)
return(infrt)
}
mod3ecpt <- pkmod(pars_pk = c(cl = 10, q2 = 2, q3 =20, v = 15, v2 = 30, v3 = 50, ke0 = 1.2))
tci_plasma_lim(Ct = 2, pkmod = mod3ecpt, lim_amt = 0.25)
tci_plasma_lim <- function(Ct, pkmod, dtm = 1/6, maxrt = 1200,
lim_amt = 0.5, ecmpt = NULL, tmax_search = 20,
cetol = 0.05, cptol = 0.1, ...){
pkmod <- update(pkmod,...)
# if effect-site concentration is close to target,
# switch to plasma targeting
if(with(pkmod,(Ct - init[ecmpt]) / Ct <  cetol &
(Ct - init[pcmpt])/Ct <= cptol))
return(tci_plasma(Ct, pkmod = pkmod, dtm = dtm, maxrt = maxrt))
# maximum tolerable plasma concentration
Cp_max <- Ct + lim_amt
# infusion required to reach Cp_max
pinf <- tci_plasma(Ct = Cp_max, pkmod = pkmod, dtm = dtm, maxrt = maxrt)
# Administer dtm-minute infusion
unit_inf <- inf_manual(inf_tms = 0, inf_rate = pinf, duration = dtm)
# Calculate maximum effect-site concentration
CeP <- function(tm) predict(pkmod, inf = unit_inf, tms = tm)[,pkmod$ecmpt]
Ce_max <- optimize(CeP, c(0,20), maximum = TRUE)$objective
# if max Ce < Ct administer infusion to reach maximum target
if(Ce_max <= Ct + cetol*Ct)
infrt <- pinf
else
infrt <- tci_effect_only(Ct, pkmod, dtm, maxrt = maxrt)
return(infrt)
}
mod3ecpt <- pkmod(pars_pk = c(cl = 10, q2 = 2, q3 =20, v = 15, v2 = 30, v3 = 50, ke0 = 1.2))
tci_plasma_lim(Ct = 2, pkmod = mod3ecpt, lim_amt = 0.25)
# tci target concentrations
tci_targets <- cbind(value = c(1,2,2.5,2.5), time = c(0,3,7,10))
# calculate infusion schedule using plasma-limiting algorithm
plim_inf <- inf_tci(targets = tci_targets,
pkmod = mod3ecpt,
custom_alg = tci_plasma_lim,
lim_amt = 0.25)
# calculate infusion schedule using plasma-limiting algorithm
plim_inf <- inf_tci(target_vals = c(1,2,2.5,2.5),
target_tms = c(0,3,7,10),
pkmod = mod3ecpt,
custom_alg = tci_plasma_lim,
lim_amt = 0.25)
head(plim_inf)
# effect-site targeting
eff_inf <- inf_tci(targets = tci_targets, pkmod = mod3ecpt, type = "effect")
# effect-site targeting
eff_inf <- inf_tci(target_vals = c(1,2,2.5,2.5),
target_tms = c(0,3,7,10),
pkmod = mod3ecpt,
type = "effect")
# predict responses
tms_pred <- seq(0,10,0.1)
plim_pred <- predict(mod3ecpt, plim_inf, tms_pred)
eff_pred <- predict(mod3ecpt, eff_inf, tms_pred)
# plot results
dat <- data.frame(time = tms_pred,
`plasma (custom)` = plim_pred[,"c1"],
`effect (custom)` = plim_pred[,"c4"],
`plasma (effect)` = eff_pred[,"c1"],
`effect (effect)` = eff_pred[,"c4"],
check.names = FALSE)
datm <- melt(dat, id = "time")
datm$algorithm <- ifelse(datm$variable %in% c("plasma (custom)","effect (custom)"),
"Plasma-limiting", "Effect-site")
ggplot(datm, aes(x = time, y = value, color = variable, linetype = algorithm)) +
geom_line() +
xlab("Minutes") +
ylab("Concentration (mg/L)") +
ggtitle(label = "Plasma-limiting effect-site TCI algorithm")
devtools::document()
library(tci)
# load packages
library(tci)
library(knitr)
library(gridExtra)
list_pkmods()
data <- data.frame(ID = 1:5,
AGE = seq(20,60,by=10),
TBW = seq(60,80,by=5),
HGT = seq(150,190,by=10),
MALE = c(TRUE,TRUE,FALSE,FALSE,FALSE))
ppf_eleveld <- poppkmod(drug = "ppf", model = "eleveld")
data <- data.frame(ID = 1:5,
AGE = seq(20,60,by=10),
TBW = seq(60,80,by=5),
HGT = seq(150,190,by=10),
MALE = c(TRUE,TRUE,FALSE,FALSE,FALSE))
ppf_eleveld <- poppkmod(drug = "ppf", model = "eleveld")
ppf_eleveld <- poppkmod(data, drug = "ppf", model = "eleveld")
ppf_eleveld
x <- ppf_eleveld
x <- poppkmod(data, drug = "ppf", model = "eleveld")
drug_type <- ifelse(x$drug == "ppf","propofol","remifentanil")
Hmisc::capitalize
substr(x$model,1,1)
substr(x$model,1,1)
substr(mod_name,1,1)
mod_name <- x$model
substr(mod_name,1,1)
toupper(substr(mod_name,1,1))
substr(mod_name,1,1) <- toupper(substr(mod_name,1,1))
mod_name
drug_type <- ifelse(x$drug == "ppf","propofol","remifentanil")
mod_name <- x$model
substr(mod_name,1,1) <- toupper(substr(mod_name,1,1))
print(paste(mod_name, "population model for",drug_type))
cat(paste(mod_name, "population model for",drug_type))
length(x$pkmods)
x$pkmods
x$pkmods[[1]]
x$pkmods[[1]]$pars_pk
names(x$pkmods[[1]]$pars_pk)
tci_type <- ifelse("ke0" %in% tolower(names(x$pkmods[[1]]$pars_pk)), "Effect","Plamsa")
cat(paste("Default TCI targeting:",tci_type))
x$pkmods[[1]]$ncmpt
x$pkmods[[1]]$ncmpt
paste(x$pkmods[[1]]$ncmpt," compartment")
paste(x$pkmods[[1]]$ncmpt,"compartment")
ifelse(x$pkmods[[1]]$ncmpt == 4, "3 compartment-effect", paste(x$pkmods[[1]]$ncmpt,"compartment"))
ncmpt <- ifelse(x$pkmods[[1]]$ncmpt == 4, "3 compartment-effect", paste(x$pkmods[[1]]$ncmpt,"compartment"))
pkstr <- ifelse(x$pkmods[[1]]$ncmpt == 4, "3 compartment-effect", paste(x$pkmods[[1]]$ncmpt,"compartment"))
cat(paste("Structural PK model:", pkstr))
cat(paste("Structural PK model:", pkstr))
names(x$pkmods[[1]]$pars_pk)
x$pkmods[[1]]$pdfn
!is.null(x$pkmods[[1]]$pdfn)
cat(paste("Structural PD model:", ifelse(!is.null(x$pkmods[[1]]$pdfn), "Emax", "None")))
cat(paste("PD parameter names:", names(x$pkmods[[1]]$pars_pd)))
names(x$pkmods[[1]]$pars_pd))
names(x$pkmods[[1]]$pars_pd)
paste(names(x$pkmods[[1]]$pars_pk), collapse = " ")
paste("PK parameter names:", paste(names(x$pkmods[[1]]$pars_pk), collapse = " "))
cat(paste("PK parameter names:", paste(names(x$pkmods[[1]]$pars_pk), collapse = " ")))
cat(paste("PD parameter names:", paste(names(x$pkmods[[1]]$pars_pd), collapse = " ")))
cat("--- Model summary --------------------------------------", "\n")
drug_type <- ifelse(x$drug == "ppf","propofol","remifentanil")
mod_name <- x$model
substr(mod_name,1,1) <- toupper(substr(mod_name,1,1))
cat(paste(mod_name, "population model for",drug_type))
cat(paste("Number of individuals:",length(x$pkmods)))
cat("--- PK model -------------------------------------------", "\n")
pkstr <- ifelse(x$pkmods[[1]]$ncmpt == 4, "3 compartment-effect", paste(x$pkmods[[1]]$ncmpt,"compartment"))
cat(paste("Structural PK model:", pkstr))
cat(paste("PK parameter names:", paste(names(x$pkmods[[1]]$pars_pk), collapse = " ")))
tci_type <- ifelse("ke0" %in% tolower(names(x$pkmods[[1]]$pars_pk)), "Effect-site","Plamsa")
cat(paste("Default TCI targeting:",tci_type))
cat("--- PD model -------------------------------------------", "\n")
cat(paste("Structural PD model:", ifelse(!is.null(x$pkmods[[1]]$pdfn), "Emax", "None")))
cat(paste("PD parameter names:", paste(names(x$pkmods[[1]]$pars_pd), collapse = " ")))
sapply(x$pkmods, `[[`, "pars_pk")
t(sapply(x$pkmods, `[[`, "pars_pk"))
vals_pk <- summary(t(sapply(x$pkmods, `[[`, "pars_pk")))
vals_pk
?summary
summary(t(sapply(x$pkmods, `[[`, "pars_pk")), quantile.type = 5)
summary(t(sapply(x$pkmods, `[[`, "pars_pk")), quantile.type = 3)
summary(t(sapply(x$pkmods, `[[`, "pars_pk")), quantile.type = 3)[c(1,3,7)]
summary(t(sapply(x$pkmods, `[[`, "pars_pk")), quantile.type = 3)
str(summary(t(sapply(x$pkmods, `[[`, "pars_pk")), quantile.type = 3))
summary(t(sapply(x$pkmods, `[[`, "pars_pk")))[c(1,3,7),]
summary(t(sapply(x$pkmods, `[[`, "pars_pk")))
str(summary(t(sapply(x$pkmods, `[[`, "pars_pk"))))
summary(t(sapply(x$pkmods, `[[`, "pars_pk")))[c(1,3,6),]
cat("PK parameters:")
cat(vals_pk)
knitr::kable(vals_pk, format = "pipe")
vals_pk <- summary(t(sapply(x$pkmods, `[[`, "pars_pk")))[c(1,3,6),]
knitr::kable(vals_pk, format = "pipe")
vals_pk <- summary(t(sapply(x$pkmods, `[[`, "pars_pk")), digits = 2)[c(1,3,6),]
knitr::kable(vals_pk, format = "pipe")
vals_pk <- summary(t(sapply(x$pkmods, `[[`, "pars_pk")), digits = 3)[c(1,3,6),]
knitr::kable(vals_pk, format = "pipe")
!is.null(x$pkmods[[1]]$pars_pd)
vals_pd <- summary(t(sapply(x$pkmods, `[[`, "pars_pd")), digits = 3)[c(1,3,6),]
vals_pd
knitr::kable(vals_pd, format = "pipe")
devtools::document()
library(tci)
data <- data.frame(ID = 1:5,
AGE = seq(20,60,by=10),
TBW = seq(60,80,by=5),
HGT = seq(150,190,by=10),
MALE = c(TRUE,TRUE,FALSE,FALSE,FALSE))
poppkmod(data, drug = "ppf", model = "eleveld")
cat(knitr::kable(vals_pk, format = "pipe"))
knitr::kable(vals_pk, format = "pipe")
knitr::knit_print(vals_pk, format = "pipe")
knitr::kable(vals_pk, format = "pipe")
knitr::knit_print(knitr::kable(vals_pk, format = "pipe")))
knitr::knit_print(knitr::kable(vals_pk, format = "pipe"))
cat(knitr::kable(vals_pk, format = "pipe"))
knitr::kable(vals_pk, format = "pipe")
str(knitr::kable(vals_pk, format = "pipe"))
library(tci)
data <- data.frame(ID = 1:5,
AGE = seq(20,60,by=10),
TBW = seq(60,80,by=5),
HGT = seq(150,190,by=10),
MALE = c(TRUE,TRUE,FALSE,FALSE,FALSE))
poppkmod(data, drug = "ppf", model = "eleveld")
knitr::kable(vals_pk, format = "rst")
poppkmod(data, drug = "ppf", model = "eleveld")
library(tci)
poppkmod(data, drug = "ppf", model = "eleveld")
data <- data.frame(ID = 1:5,
AGE = seq(20,60,by=10),
TBW = seq(60,80,by=5),
HGT = seq(150,190,by=10),
MALE = c(TRUE,TRUE,FALSE,FALSE,FALSE))
x = data
digits = 3
cat("--- Model summary --------------------------------------", "\n")
drug_type <- ifelse(x$drug == "ppf","propofol","remifentanil")
mod_name <- x$model
substr(mod_name,1,1) <- toupper(substr(mod_name,1,1))
cat(paste(mod_name, "population model for",drug_type), "\n")
mod_name
x$model
x
x <- poppkmod(data, drug = "ppf", model = "eleveld")
library(tci)
x <- poppkmod(data, drug = "ppf", model = "eleveld")
cat("--- Model summary --------------------------------------", "\n")
drug_type <- ifelse(x$drug == "ppf","propofol","remifentanil")
mod_name <- x$model
substr(mod_name,1,1) <- toupper(substr(mod_name,1,1))
cat(paste(mod_name, "population model for",drug_type), "\n")
cat(paste("Number of individuals:",length(x$pkmods)), "\n")
cat("--- PK model -------------------------------------------", "\n")
pkstr <- ifelse(x$pkmods[[1]]$ncmpt == 4, "3 compartment-effect", paste(x$pkmods[[1]]$ncmpt,"compartment"))
cat(paste("Structural PK model:", pkstr), "\n")
cat("PK parameters:", "\n")
vals_pk <- summary(t(sapply(x$pkmods, `[[`, "pars_pk")), digits = digits)[c(1,3,6),]
knitr::kable(vals_pk, format = "rst")
knitr::kable
