}
theta <- c(v1 = 8.995, v2 = 17.297, v3 = 120.963, cl = 1.382,
q2 = 0.919, q3 = 0.609, ke0 = 1.289, c50 = 2.8, gamma = 1.47,
gamma2 = 1.89, e0 = 93, emx = 93, sigma = 8.03, bis_delay = 28.263)
inf <- create_intvl(data.frame(time = c(1, 5, 10,20),
infrt = c(10, 5, 3,0)))
predict(pkmod3cptm, inf = inf, pars = theta, tms = c(0.5,1,1.5,2,3,4,10,12,20))
# debug(predict_pkmod_cpt)
predict_pkmod(pkmod3cptm, inf = inf, pars = theta, tms = c(0.5,1,1.5,2,3,4,10,12,20))
predict_pkmod
debug(predict_pkmod)
# debug(predict_pkmod_cpt)
predict_pkmod(pkmod3cptm, inf = inf, pars = theta, tms = c(0.5,1,1.5,2,3,4,10,12,20))
length(init)
format_pars <- function(pars, ncmpt = 3){
names(pars) <- tolower(names(pars))
if("v" %in% names(pars)){
v1 <- pars["v"]
} else{
v1 <- pars["v1"]
}
if("cl" %in% names(pars)){
k10 <- pars["cl"]/v1
} else{
k10 <- pars["k10"]
}
if(ncmpt >= 2){
v2 <- pars["v2"]
if("q2" %in% names(pars)){
k12 = pars["q2"]/v1
k21 = pars["q2"]/v2
} else{
k12 = pars["k12"]
k21 = pars["k21"]
}
}
if(ncmpt >= 3){
v3 <- pars["v3"]
if("q3" %in% names(pars)){
k13 = pars["q3"]/v1
k31 = pars["q3"]/v3
} else{
k13 = pars["k13"]
k31 = pars["k31"]
}
}
if(ncmpt >= 3){
pars_out <- c(k10,k12,k21,k13,k31,v1,v2,v3)
} else if(ncmpt == 2){
pars_out <- c(k10,k12,k21,v1,v2)
} else{
pars_out <- c(k10,v1)
}
if("ke0" %in% names(pars)){
pars_out <- c(pars_out, pars["ke0"])
}
return(pars_out)
}
predict_pkmod <- function(object, ..., inf, tms = NULL, dtm = 1/6, return_init = FALSE,
remove_bounds = TRUE){
if(!all(c("infrt","begin","end") %in% colnames(inf)))
stop("inf must include 'infrt','begin','end' as column names")
dot.args <- list(...)
if(!("init" %in% names(formals(object))))
stop("object must contain argument 'init'")
if(!("pars" %in% names(dot.args)) &
is.symbol(formals(object)$pars))
stop("PK parameters must be passed as 'pars' within predict or set
as defaults in PK model object")
if("init" %in% names(dot.args)){
init <- unlist(dot.args$init)
} else {
init <- eval(formals(object)$init)
}
if("pars" %in% names(dot.args)){
pars <- unlist(dot.args$pars)
dot.args$pars <- NULL
} else {
pars <- eval(formals(object)$pars)
}
begin <- inf[,"begin"]
end <- inf[,"end"]
infs <- inf[,"infrt"]
ncpmt <- length(init)
if(is.null(tms)){
tms <- seq(min(begin)+dtm, max(end), by = dtm)
}
pars_eval <- format_pars(pars, ncmpt = ncpmt)
pred <- pk_solution_3cpt_metab_cpp(tms, pars_eval, begin, end, infs, init)
# Return predicted concentrations
if(dim(pred)[1] == 1) {
predtms <- cbind(tms, c(pred))
} else{
predtms <- cbind(tms, t.default(pred))
}
# Add on t=0 concentrations
if(return_init) predtms <- rbind(c(inf[1,"begin"], init), predtms)
# # remove transition concentrations
if(!is.null(tms) & remove_bounds){
predtms <- matrix(predtms[which(predtms[,1] %in% tms),],
nrow = length(tms), byrow = FALSE)
}
colnames(predtms) <- c("time",paste0("c",1:length(init)))
return(predtms)
}
theta <- c(v1 = 8.995, v2 = 17.297, v3 = 120.963, cl = 1.382,
q2 = 0.919, q3 = 0.609, ke0 = 1.289, c50 = 2.8, gamma = 1.47,
gamma2 = 1.89, e0 = 93, emx = 93, sigma = 8.03, bis_delay = 28.263)
inf <- create_intvl(data.frame(time = c(1, 5, 10,20),
infrt = c(10, 5, 3,0)))
predict(pkmod3cptm, inf = inf, pars = theta, tms = c(0.5,1,1.5,2,3,4,10,12,20))
# debug(predict_pkmod)
# predict_pkmod(pkmod3cptm, inf = inf, pars = theta, tms = c(0.5,1,1.5,2,3,4,10,12,20))
library(pkRcpp)
# debug(predict_pkmod_cpt)
predict_pkmod(pkmod3cptm, inf = inf, pars = theta, tms = c(0.5,1,1.5,2,3,4,10,12,20))
microbenchmark::microbenchmark(
predict(pkmod3cptm, inf = inf, pars = theta, tms = c(0.5,1,1.5,2,3,4,10,12,20)),
predict_pkmod(pkmod3cptm, inf = inf, pars = theta, tms = c(0.5,1,1.5,2,3,4,10,12,20))
)
#' Order parameters for 1-4 compartment models to be used in Rcpp functions in
#' predict.pkmod method.
#'
#' @param pars Vector of named parameters. Names can be capitalized or lowercase
#' and can include variations of "V1" as "V" or clearance terms rather than
#' elimination rate constants.
#' @param ncmpt Number of compartments in the model. This should be a value
#' between 1 and 4. If ncmpt = 4, it assumes that the fourth compartment is an
#' effect-site without a corresponding volume parameter.
#' @export
format_pars <- function(pars, ncmpt = 3){
names(pars) <- tolower(names(pars))
if("v" %in% names(pars)){
v1 <- pars["v"]
} else{
v1 <- pars["v1"]
}
if("cl" %in% names(pars)){
k10 <- pars["cl"]/v1
} else{
k10 <- pars["k10"]
}
if(ncmpt >= 2){
v2 <- pars["v2"]
if("q2" %in% names(pars)){
k12 = pars["q2"]/v1
k21 = pars["q2"]/v2
} else{
k12 = pars["k12"]
k21 = pars["k21"]
}
}
if(ncmpt >= 3){
v3 <- pars["v3"]
if("q3" %in% names(pars)){
k13 = pars["q3"]/v1
k31 = pars["q3"]/v3
} else{
k13 = pars["k13"]
k31 = pars["k31"]
}
}
if(ncmpt >= 3){
pars_out <- c(k10,k12,k21,k13,k31,v1,v2,v3)
} else if(ncmpt == 2){
pars_out <- c(k10,k12,k21,v1,v2)
} else{
pars_out <- c(k10,v1)
}
if("ke0" %in% names(pars)){
pars_out <- c(pars_out, pars["ke0"])
}
return(pars_out)
}
theta
pars <- c(V1 = 8.9, CL = 1.4, q2 = 0.9, v2 = 18)
format_pars(pars)
format_pars(pars, ncmpt = 2)
pk_solution_3cpt_metab_cpp
library(tci)
ncpmt <- NULL
ncpmt
devtools::document()
?devtools::document
library(tci)
devtools::document()
devtools::document()
library(tci)
# Chunk 1: knitr_setup
## install from github
# devtools::install_github("jarretrt/tci")
library(tci)
library(gridExtra)
library(xtable)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
options(xtable.comment = FALSE)
# Chunk 2: patient-covariates
# Access Eleveld et al. (2018) data
data(eleveld_pk)
id <- 47 # example patient
patient_covariates <- eleveld_pk[eleveld_pk$ID == id,
c("ID","AGE","PMA","WGT","HGT","TECH","BMI","M1F2","A1V2")]
pkpd_vars <- c("V1","V2","V3","CL","Q2","Q3","KE0","CE50","BIS0","BIS0",
"GAMMA","GAMMA2","SIGMA","BIS_DELAY")
# prior point estimates - non-random
theta <- unlist(eleveld_poppk(patient_covariates)[,pkpd_vars])
# "true" parameter values via Monte Carlo sampling
set.seed(1)
theta0 <- unlist(eleveld_poppk(patient_covariates, rand = TRUE)[,pkpd_vars])
# Chunk 5: tci-base
theta <- c(v1 = 8.995, v2 = 17.297, v3 = 120.963, cl = 1.382,
q2 = 0.919, q3 = 0.609, ke0 = 1.289, c50 = 2.8, gamma = 1.47,
gamma2 = 1.89, e0 = 93, emx = 93, sigma = 8.03, bis_delay = 28.263)
kR_Cp <- tci_plasma(Cpt = 2, dtm = 1, pkmod = pkmod3cptm, pars = theta)
kR_Ce <- tci_effect(Cet = 2, dtm = 1, pkmod = pkmod3cptm, pars = theta)
print(round(c(kR_Cp = kR_Cp, kR_Ce = kR_Ce),2))
tci
tci_effect
inf_effect
inf_effect <- tci(Ct = c(1,2,2.5,2.5), tms = c(0,1,6,11), pkmod = pkmod3cptm,
pars = theta, tci_alg = "effect")
inf_effect
predict_pkmod(pkmod3cptm, inf = inf_effect, pars = theta)
predict(pkmod3cptm, inf = inf_effect, pars = theta)
predict(pkmod3cptm, inf = inf_effect, pars = theta)
tci_effect(Cet = 2, dtm = 1, pkmod = pkmod3cptm, pars = theta)
tci_effect
kR_Ce <- tci_effect(Cet = 2, dtm = 1, pkmod = pkmod3cptm, pars = theta, tms = c(1:5))
predict(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
predict_pkmod(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
debug(predict_pkmod)
predict_pkmod(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
init
ncpmt
format_pars(pars, ncmpt = ncpmt)
pars_eval <- format_pars(pars, ncmpt = ncmpt)
ncmpt == 4
ncmpt <- length(init)
ncmpt == 4
#' spanning the infusions at intervals of dtm.
#' @param dtm Interval used for prediction if argument tms is unspecified.
#' @param return_init Logical indicating if concentrations at time 0 should
#' be returned. Defaults to FALSE.
#' @param remove_bounds Logical, indicating if concentrations calculated at
#' changes in infusion rates should be returned if not included in prediction
#' times. Defaults to TRUE, so that only concentrations at specified times
#' are returned.
#'
#' @export
predict_pkmod <- function(object, ..., inf, tms = NULL, dtm = 1/6, return_init = FALSE,
remove_bounds = TRUE){
ncmpt <- NA
if(!all(c("infrt","begin","end") %in% colnames(inf)))
stop("inf must include 'infrt','begin','end' as column names")
dot.args <- list(...)
if(!("init" %in% names(formals(object))))
stop("object must contain argument 'init'")
if(!("pars" %in% names(dot.args)) &
is.symbol(formals(object)$pars))
stop("PK parameters must be passed as 'pars' within predict or set
as defaults in PK model object")
if("init" %in% names(dot.args)){
init <- unlist(dot.args$init)
} else {
init <- eval(formals(object)$init)
}
if("pars" %in% names(dot.args)){
pars <- unlist(dot.args$pars)
dot.args$pars <- NULL
} else {
pars <- eval(formals(object)$pars)
}
begin <- inf[,"begin"]
end <- inf[,"end"]
infs <- inf[,"infrt"]
ncmpt <- length(init)
if(is.null(tms)){
tms <- seq(min(begin)+dtm, max(end), by = dtm)
}
pars_eval <- format_pars(pars, ncmpt = ncmpt)
if(ncmpt == 4){
pred <- pk_solution_3cpt_metab_cpp(tms, pars_eval, begin, end, infs, init)
}
# Return predicted concentrations
if(dim(pred)[1] == 1) {
predtms <- cbind(tms, c(pred))
} else{
predtms <- cbind(tms, t.default(pred))
}
# Add on t=0 concentrations
if(return_init) predtms <- rbind(c(inf[1,"begin"], init), predtms)
# # remove transition concentrations
if(!is.null(tms) & remove_bounds){
predtms <- matrix(predtms[which(predtms[,1] %in% tms),],
nrow = length(tms), byrow = FALSE)
}
colnames(predtms) <- c("time",paste0("c",1:length(init)))
return(predtms)
}
predict(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
predict_pkmod(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
library(tci)
theta <- c(v1 = 8.995, v2 = 17.297, v3 = 120.963, cl = 1.382,
q2 = 0.919, q3 = 0.609, ke0 = 1.289, c50 = 2.8, gamma = 1.47,
gamma2 = 1.89, e0 = 93, emx = 93, sigma = 8.03, bis_delay = 28.263)
inf_effect <- tci(Ct = c(1,2,2.5,2.5), tms = c(0,1,6,11), pkmod = pkmod3cptm,
pars = theta, tci_alg = "effect")
predict(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
predict_pkmod(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
devtools::document()
devtools::document()
library(tci)
predict_pkmod
pk_solution_3cpt_metab_cpp
theta <- c(v1 = 8.995, v2 = 17.297, v3 = 120.963, cl = 1.382,
q2 = 0.919, q3 = 0.609, ke0 = 1.289, c50 = 2.8, gamma = 1.47,
gamma2 = 1.89, e0 = 93, emx = 93, sigma = 8.03, bis_delay = 28.263)
inf_effect <- tci(Ct = c(1,2,2.5,2.5), tms = c(0,1,6,11), pkmod = pkmod3cptm,
pars = theta, tci_alg = "effect")
predict(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
predict_pkmod(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
devtools::document()
predict_pkmod
devtools::document()
theta <- c(v1 = 8.995, v2 = 17.297, v3 = 120.963, cl = 1.382,
q2 = 0.919, q3 = 0.609, ke0 = 1.289, c50 = 2.8, gamma = 1.47,
gamma2 = 1.89, e0 = 93, emx = 93, sigma = 8.03, bis_delay = 28.263)
inf_effect <- tci(Ct = c(1,2,2.5,2.5), tms = c(0,1,6,11), pkmod = pkmod3cptm,
pars = theta, tci_alg = "effect")
predict_pkmod
pksol3cptm
library(Rcpp)
version(Rcpp)
packageVersion("Rcpp")
devtools::document()
library(tci)
predict_pkmod
pksol3cptm
theta <- c(v1 = 8.995, v2 = 17.297, v3 = 120.963, cl = 1.382,
q2 = 0.919, q3 = 0.609, ke0 = 1.289, c50 = 2.8, gamma = 1.47,
gamma2 = 1.89, e0 = 93, emx = 93, sigma = 8.03, bis_delay = 28.263)
inf_effect <- tci(Ct = c(1,2,2.5,2.5), tms = c(0,1,6,11), pkmod = pkmod3cptm,
pars = theta, tci_alg = "effect")
predict(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
predict_pkmod(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
install.packages("RcppArmadillo")
install.packages("RcppArmadillo")
install.packages("RcppArmadillo")
install.packages("RcppArmadillo")
install.packages("RcppArmadillo")
sourceCpp("src/pk_cpp_functions.cpp")
library(Rcpp)
library(RcppArmadillo)
sourceCpp("src/pk_cpp_functions.cpp")
?sourceCpp
sourceCpp("src/pk_cpp_functions.cpp")
packageurl <- "https://cran.r-project.org/src/contrib/Archive/RcppArmadillo/RcppArmadillo_0.10.2.1.0.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
library(Rcpp)
library(RcppArmadillo)
sourceCpp("src/pk_cpp_functions.cpp")
library(Rcpp)
library(RcppArmadillo)
sourceCpp("src/pk_cpp_functions.cpp")
sourceCpp("src/pk_cpp_functions.cpp")
View(basicsolution3cptm)
devtools::document()
library(tci)
theta <- c(v1 = 8.995, v2 = 17.297, v3 = 120.963, cl = 1.382,
q2 = 0.919, q3 = 0.609, ke0 = 1.289, c50 = 2.8, gamma = 1.47,
gamma2 = 1.89, e0 = 93, emx = 93, sigma = 8.03, bis_delay = 28.263)
inf_effect <- tci(Ct = c(1,2,2.5,2.5), tms = c(0,1,6,11), pkmod = pkmod3cptm,
pars = theta, tci_alg = "effect")
predict(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
predict_pkmod(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
pkmod3cptm
predict_pkmod
pksol3cptm
pksol3cptm
sourceCpp("src/pk_cpp_functions.cpp")
library(Rcpp)
library(RcppArmadillo)
sourceCpp("src/pk_cpp_functions.cpp")
predict_pkmod
pksol3cptm
predict(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
predict_pkmod(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
predict_pkmod
pksol3cptm
cd(..)
setwd("..")
setwd("..")
RcppArmadillo.package.skeleton("test")
devtools::load_all("~/Dropbox/R Packages/tci_rcpp/")
predict_pkmod
pksol3cptm
predict(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
predict_pkmod(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
theta <- c(v1 = 8.995, v2 = 17.297, v3 = 120.963, cl = 1.382,
q2 = 0.919, q3 = 0.609, ke0 = 1.289, c50 = 2.8, gamma = 1.47,
gamma2 = 1.89, e0 = 93, emx = 93, sigma = 8.03, bis_delay = 28.263)
inf_effect <- tci(Ct = c(1,2,2.5,2.5), tms = c(0,1,6,11), pkmod = pkmod3cptm,
pars = theta, tci_alg = "effect")
predict(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
library(tci_rcpp)
library(test)
theta <- c(v1 = 8.995, v2 = 17.297, v3 = 120.963, cl = 1.382,
q2 = 0.919, q3 = 0.609, ke0 = 1.289, c50 = 2.8, gamma = 1.47,
gamma2 = 1.89, e0 = 93, emx = 93, sigma = 8.03, bis_delay = 28.263)
inf_effect <- tci(Ct = c(1,2,2.5,2.5), tms = c(0,1,6,11), pkmod = pkmod3cptm,
pars = theta, tci_alg = "effect")
predict(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
library(Rcpp)
library(RcppArmadillo)
sourceCpp("src/pk_cpp_functions.cpp")
library(test)
theta <- c(v1 = 8.995, v2 = 17.297, v3 = 120.963, cl = 1.382,
q2 = 0.919, q3 = 0.609, ke0 = 1.289, c50 = 2.8, gamma = 1.47,
gamma2 = 1.89, e0 = 93, emx = 93, sigma = 8.03, bis_delay = 28.263)
inf_effect <- tci(Ct = c(1,2,2.5,2.5), tms = c(0,1,6,11), pkmod = pkmod3cptm,
pars = theta, tci_alg = "effect")
inf_effect
predict(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
predict_pkmod(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
devtools::load_all("~/Dropbox/R Packages/tci_rcpp/")
library(tci)
library(tci)
library(devtools)
?build
build(path = "../../CRAN/")
check()
check(cran = TRUE)
library(devtools)
document()
library(tci)
build(path = "../../CRAN/")
document()
library(tci)
build(path = "../../CRAN/")
document()
library(tci)
build(path = "../../CRAN/")
library(tci)
devtools::build(path = "../../CRAN/")
library(tci)
devtools::build(path = "../CRAN/")
devtools::check()
packageurl <- "https://cran.r-project.org/src/contrib/Archive/RcppArmadillo/RcppArmadillo_0.10.2.1.0.tar.gz"
# packageurl <- "https://cran.r-project.org/src/contrib/Archive/RcppArmadillo/RcppArmadillo_0.10.2.1.0.tar.gz"
# install.packages(packageurl, repos=NULL, type="source")
install.packages("tci")
install.packages("tci")
version(tci)
package_version(tci)
package_version("tci")
packageVersion("tci")
library(test)
theta <- c(v1 = 8.995, v2 = 17.297, v3 = 120.963, cl = 1.382,
q2 = 0.919, q3 = 0.609, ke0 = 1.289, c50 = 2.8, gamma = 1.47,
gamma2 = 1.89, e0 = 93, emx = 93, sigma = 8.03, bis_delay = 28.263)
inf_effect <- tci(Ct = c(1,2,2.5,2.5), tms = c(0,1,6,11), pkmod = pkmod3cptm,
pars = theta, tci_alg = "effect")
inf_effect
predict_pkmod
predict(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
predict_pkmod(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
predict_pkmod
sourceCpp("src/pk_cpp_functions.cpp")
library(Rcpp)
library(RcppArmadillo)
sourceCpp("src/pk_cpp_functions.cpp")
predict(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
predict_pkmod(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
predict_pkmod
debug(predict_pkmod)
predict_pkmod(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
tms
ncmpt
pars_eval
pksol3cptm(tms, pars_eval, begin, end, infs, init)
pksol3cptm
.Call('pksol3cptm', PACKAGE = 'tci', tms, pars, begin, end, infs, init)
pksol3cptm
install.packages("../CRAN/tci_0.1.1.tar.gz")
install.packages("../CRAN/tci_0.1.1.tar.gz", repos = NULL, type = "source")
predict_pkmod
pksol3cptm
debug(predict_pkmod)
predict_pkmod(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
pksol3cptm(tms, pars_eval, begin, end, infs, init)
pksol3cptm
pksol3cptm
detatch(package = "test")
detach(package = "test")
detach("package:test", unload = TRUE)
# library(test)
library(tci)
theta <- c(v1 = 8.995, v2 = 17.297, v3 = 120.963, cl = 1.382,
q2 = 0.919, q3 = 0.609, ke0 = 1.289, c50 = 2.8, gamma = 1.47,
gamma2 = 1.89, e0 = 93, emx = 93, sigma = 8.03, bis_delay = 28.263)
inf_effect <- tci(Ct = c(1,2,2.5,2.5), tms = c(0,1,6,11), pkmod = pkmod3cptm,
pars = theta, tci_alg = "effect")
predict(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
# library(test)
library(tci)
theta <- c(v1 = 8.995, v2 = 17.297, v3 = 120.963, cl = 1.382,
q2 = 0.919, q3 = 0.609, ke0 = 1.289, c50 = 2.8, gamma = 1.47,
gamma2 = 1.89, e0 = 93, emx = 93, sigma = 8.03, bis_delay = 28.263)
inf_effect <- tci(Ct = c(1,2,2.5,2.5), tms = c(0,1,6,11), pkmod = pkmod3cptm,
pars = theta, tci_alg = "effect")
predict(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
predict_pkmod(pkmod3cptm, inf = inf_effect, pars = theta, tms = c(1:5))
