a_1 <- function(t) {
A1term1 = A1last*(exp(-t*lambda1)*(E2-lambda1)*(E3-lambda1)/((lambda2-lambda1)*(lambda3-lambda1))+exp(-t*lambda2)*(E2-lambda2)*(E3-lambda2)/((lambda1-lambda2)*(lambda3-lambda2))+exp(-t*lambda3)*(E2-lambda3)*(E3-lambda3)/((lambda1-lambda3)*(lambda2-lambda3)))
A1term2 = exp(-t*lambda1)*(C-B*lambda1)/((lambda1-lambda2)*(lambda1-lambda3))+exp(-t*lambda2)*(B*lambda2-C)/((lambda1-lambda2)*(lambda2-lambda3))+exp(-t*lambda3)*(B*lambda3-C)/((lambda1-lambda3)*(lambda3-lambda2))
A1term3 = Doserate*((E2*E3)/(lambda1*lambda2*lambda3)-exp(-t*lambda1)*(E2-lambda1)*(E3-lambda1)/(lambda1*(lambda2-lambda1)*(lambda3-lambda1))-exp(-t*lambda2)*(E2-lambda2)*(E3-lambda2)/(lambda2*(lambda1-lambda2)*(lambda3-lambda2))-exp(-t*lambda3)*(E2-lambda3)*(E3-lambda3)/(lambda3*(lambda1-lambda3)*(lambda2-lambda3)))
return(A1term1+A1term2+A1term3)
}
a_2 <- function(t) {
A2term1 = A2last*(exp(-t*lambda1)*(E1-lambda1)*(E3-lambda1)/((lambda2-lambda1)*(lambda3-lambda1))+exp(-t*lambda2)*(E1-lambda2)*(E3-lambda2)/((lambda1-lambda2)*(lambda3-lambda2))+exp(-t*lambda3)*(E1-lambda3)*(E3-lambda3)/((lambda1-lambda3)*(lambda2-lambda3)))
A2term2 = exp(-t*lambda1)*(I-A1last*k12*lambda1)/((lambda1-lambda2)*(lambda1-lambda3))+exp(-t*lambda2)*(A1last*k12*lambda2-I)/((lambda1-lambda2)*(lambda2-lambda3))+exp(-t*lambda3)*(A1last*k12*lambda3-I)/((lambda1-lambda3)*(lambda3-lambda2))
A2term3 = Doserate*k12*(E3/(lambda1*lambda2*lambda3)-exp(-t*lambda1)*(E3-lambda1)/(lambda1*(lambda2-lambda1)*(lambda3-lambda1))-exp(-t*lambda2)*(E3-lambda2)/(lambda2*(lambda1-lambda2)*(lambda3-lambda2))-exp(-t*lambda3)*(E3-lambda3)/(lambda3*(lambda1-lambda3)*(lambda2-lambda3)))
return(A2term1+A2term2+A2term3)
}
a_3 <- function(t) {
A3term1 = A3last*(exp(-t*lambda1)*(E1-lambda1)*(E2-lambda1)/((lambda2-lambda1)*(lambda3-lambda1))+exp(-t*lambda2)*(E1-lambda2)*(E2-lambda2)/((lambda1-lambda2)*(lambda3-lambda2))+exp(-t*lambda3)*(E1-lambda3)*(E2-lambda3)/((lambda1-lambda3)*(lambda2-lambda3)))
A3term2 = exp(-t*lambda1)*(J-A1last*k13*lambda1)/((lambda1-lambda2)*(lambda1-lambda3))+exp(-t*lambda2)*(A1last*k13*lambda2-J)/((lambda1-lambda2)*(lambda2-lambda3))+exp(-t*lambda3)*(A1last*k13*lambda3-J)/((lambda1-lambda3)*(lambda3-lambda2))
A3term3 = Doserate*k13*(E2/(lambda1*lambda2*lambda3)-exp(-t*lambda1)*(E2-lambda1)/(lambda1*(lambda2-lambda1)*(lambda3-lambda1))-exp(-t*lambda2)*(E2-lambda2)/(lambda2*(lambda1-lambda2)*(lambda3-lambda2))-exp(-t*lambda3)*(E2-lambda3)/(lambda3*(lambda1-lambda3)*(lambda2-lambda3)))
return(A3term1+A3term2+A3term3)
}
a_4 <- function(t) {
Amterm1 = Amlast*exp(-t*kme) +km*A1last*(exp(-t*lambda1)*(E2-lambda1)*(E3-lambda1)/((lambda2-lambda1)*(lambda3-lambda1)*(kme-lambda1))+exp(-t*lambda2)*(E2-lambda2)*(E3-lambda2)/((kme-lambda2)*(lambda1-lambda2)*(lambda3-lambda2))+exp(-t*lambda3)*(E2-lambda3)*(E3-lambda3)/((kme-lambda3)*(lambda1-lambda3)*(lambda2-lambda3))+exp(-t*kme)*(E2-kme)*(E3-kme)/((lambda1-kme)*(lambda2-kme)*(lambda3-kme)))
Amterm2 = km*(exp(-t*lambda1)*(B*lambda1-C)/((lambda1-lambda2)*(lambda1-lambda3)*(lambda1-kme))+exp(-t*lambda2)*(C-B*lambda2)/((lambda1-lambda2)*(lambda2-lambda3)*(lambda2-kme))+exp(-t*lambda3)*(C-B*lambda3)/((lambda1-lambda3)*(lambda3-lambda2)*(lambda3-kme))-exp(-t*kme)*(B*kme-C)/((lambda1-kme)*(kme-lambda2)*(kme-lambda3)))
Amterm3 = km*Doserate*((E2*E3)/(lambda1*lambda2*lambda3*kme)-exp(-t*lambda1)*(E2-lambda1)*(E3-lambda1)/(lambda1*(kme-lambda1)*(lambda2-lambda1)*(lambda3-lambda1))-exp(-t*lambda2)*(E2-lambda2)*(E3-lambda2)/(lambda2*(kme-lambda2)*(lambda1-lambda2)*(lambda3-lambda2))-exp(-t*lambda3)*(E2-lambda3)*(E3-lambda3)/(lambda3*(kme-lambda3)*(lambda1-lambda3)*(lambda2-lambda3))-exp(-t*kme)*(E2-kme)*(E3-kme)/(kme*(lambda1-kme)*(lambda2-kme)*(lambda3-kme)))
return(Amterm1+Amterm2+Amterm3)
}
c_1 <- function(t) a_1(t)/v1
c_2 <- function(t) a_2(t)/v2
c_3 <- function(t) a_3(t)/v3
c_4 <- function(t) a_4(t)/v4
out <- list(c_1=c_1, c_2=c_2, c_3=c_3, c_4=c_4)
attributes(out) <- list(infusion = kR, param = pars, initial = init)
return(out)
}
attributes(pk_basic_solution_3cpt_metab) <- list(ncompartments = 4)
pk_basic_solution_3cpt_metab(kR = 1, pars = pars_3cpt)[[1]](0)
#' A function to return the basic solution for a three compartment PK model with a metabolite compartment.
#'
#' @param kR A numeric value specifying an infusion rate.
#' @param pars A named list of PK parameters with names ("k10","k12","k21","k13","k31" "v1","v2","v3","ke0").
#' Elimination from the second or third compartments can be permitted by including "k20" or "k30", respectively within the list of parameters.
#' @param init Optional initial concentration in central compartment. Default is to assume no existing medication in any compartment.
#' @return A function that calculates compartment concentrations as a function of time for the specified PK model.
#' @export
pk_basic_solution_3cpt_metab <- function(kR, pars, init=c(0,0,0,0)) {
# browser()
list2env(as.list(pars), envir = environment())
if(!("k20" %in% ls())){
k20 <- 0
}
if(!("k30" %in% ls())){
k30 <- 0
}
kme <- ke0 # k41
# km  <- kme / 1e5 # k14 Absorption into the effect site is much slower than elimination --> as soon as any drug enters, it is eliminated
# v4  <- v1 / 1e5
km = 0
v4 = 0
k20 <- 0
k30 <- 0
E1 <- k10+k12+k13+km
E2 <- k21+k20
E3 <- k31+k30
a <- E1+E2+E3
b <- E1*E2+E3*(E1+E2)-k12*k21-k13*k31
c <- E1*E2*E3-E3*k12*k21-E2*k13*k31
m <- (3*b - a^2)/3
n <- (2*a^3 - 9*a*b + 27*c)/27
Q <- (n^2)/4 + (m^3)/27
alpha <- sqrt(-1*Q)
beta <- -1*n/2
gamma <- sqrt(beta^2+alpha^2)
theta <- atan2(alpha,beta)
lambda1 <- a/3 + gamma^(1/3)*(cos(theta/3) + sqrt(3)*sin(theta/3))
lambda2 <- a/3 + gamma^(1/3)*(cos(theta/3) - sqrt(3)*sin(theta/3))
lambda3 <- a/3 -(2*gamma^(1/3)*cos(theta/3))
A1last <- init[1]*v1
A2last <- init[2]*v2
A3last <- init[3]*v3
Amlast <- init[4]*v4
Doserate <- kR
B = A2last*k21+A3last*k31
C = E3*A2last*k21+E2*A3last*k31
I = A1last*k12*E3-A2last*k13*k31+A3last*k12*k31
J = A1last*k13*E2+A2last*k13*k21-A3last*k12*k21
# return concentration functions
a_1 <- function(t) {
A1term1 = A1last*(exp(-t*lambda1)*(E2-lambda1)*(E3-lambda1)/((lambda2-lambda1)*(lambda3-lambda1))+exp(-t*lambda2)*(E2-lambda2)*(E3-lambda2)/((lambda1-lambda2)*(lambda3-lambda2))+exp(-t*lambda3)*(E2-lambda3)*(E3-lambda3)/((lambda1-lambda3)*(lambda2-lambda3)))
A1term2 = exp(-t*lambda1)*(C-B*lambda1)/((lambda1-lambda2)*(lambda1-lambda3))+exp(-t*lambda2)*(B*lambda2-C)/((lambda1-lambda2)*(lambda2-lambda3))+exp(-t*lambda3)*(B*lambda3-C)/((lambda1-lambda3)*(lambda3-lambda2))
A1term3 = Doserate*((E2*E3)/(lambda1*lambda2*lambda3)-exp(-t*lambda1)*(E2-lambda1)*(E3-lambda1)/(lambda1*(lambda2-lambda1)*(lambda3-lambda1))-exp(-t*lambda2)*(E2-lambda2)*(E3-lambda2)/(lambda2*(lambda1-lambda2)*(lambda3-lambda2))-exp(-t*lambda3)*(E2-lambda3)*(E3-lambda3)/(lambda3*(lambda1-lambda3)*(lambda2-lambda3)))
return(A1term1+A1term2+A1term3)
}
a_2 <- function(t) {
A2term1 = A2last*(exp(-t*lambda1)*(E1-lambda1)*(E3-lambda1)/((lambda2-lambda1)*(lambda3-lambda1))+exp(-t*lambda2)*(E1-lambda2)*(E3-lambda2)/((lambda1-lambda2)*(lambda3-lambda2))+exp(-t*lambda3)*(E1-lambda3)*(E3-lambda3)/((lambda1-lambda3)*(lambda2-lambda3)))
A2term2 = exp(-t*lambda1)*(I-A1last*k12*lambda1)/((lambda1-lambda2)*(lambda1-lambda3))+exp(-t*lambda2)*(A1last*k12*lambda2-I)/((lambda1-lambda2)*(lambda2-lambda3))+exp(-t*lambda3)*(A1last*k12*lambda3-I)/((lambda1-lambda3)*(lambda3-lambda2))
A2term3 = Doserate*k12*(E3/(lambda1*lambda2*lambda3)-exp(-t*lambda1)*(E3-lambda1)/(lambda1*(lambda2-lambda1)*(lambda3-lambda1))-exp(-t*lambda2)*(E3-lambda2)/(lambda2*(lambda1-lambda2)*(lambda3-lambda2))-exp(-t*lambda3)*(E3-lambda3)/(lambda3*(lambda1-lambda3)*(lambda2-lambda3)))
return(A2term1+A2term2+A2term3)
}
a_3 <- function(t) {
A3term1 = A3last*(exp(-t*lambda1)*(E1-lambda1)*(E2-lambda1)/((lambda2-lambda1)*(lambda3-lambda1))+exp(-t*lambda2)*(E1-lambda2)*(E2-lambda2)/((lambda1-lambda2)*(lambda3-lambda2))+exp(-t*lambda3)*(E1-lambda3)*(E2-lambda3)/((lambda1-lambda3)*(lambda2-lambda3)))
A3term2 = exp(-t*lambda1)*(J-A1last*k13*lambda1)/((lambda1-lambda2)*(lambda1-lambda3))+exp(-t*lambda2)*(A1last*k13*lambda2-J)/((lambda1-lambda2)*(lambda2-lambda3))+exp(-t*lambda3)*(A1last*k13*lambda3-J)/((lambda1-lambda3)*(lambda3-lambda2))
A3term3 = Doserate*k13*(E2/(lambda1*lambda2*lambda3)-exp(-t*lambda1)*(E2-lambda1)/(lambda1*(lambda2-lambda1)*(lambda3-lambda1))-exp(-t*lambda2)*(E2-lambda2)/(lambda2*(lambda1-lambda2)*(lambda3-lambda2))-exp(-t*lambda3)*(E2-lambda3)/(lambda3*(lambda1-lambda3)*(lambda2-lambda3)))
return(A3term1+A3term2+A3term3)
}
a_4 <- function(t) {
Amterm1 = Amlast*exp(-t*kme) +km*A1last*(exp(-t*lambda1)*(E2-lambda1)*(E3-lambda1)/((lambda2-lambda1)*(lambda3-lambda1)*(kme-lambda1))+exp(-t*lambda2)*(E2-lambda2)*(E3-lambda2)/((kme-lambda2)*(lambda1-lambda2)*(lambda3-lambda2))+exp(-t*lambda3)*(E2-lambda3)*(E3-lambda3)/((kme-lambda3)*(lambda1-lambda3)*(lambda2-lambda3))+exp(-t*kme)*(E2-kme)*(E3-kme)/((lambda1-kme)*(lambda2-kme)*(lambda3-kme)))
Amterm2 = km*(exp(-t*lambda1)*(B*lambda1-C)/((lambda1-lambda2)*(lambda1-lambda3)*(lambda1-kme))+exp(-t*lambda2)*(C-B*lambda2)/((lambda1-lambda2)*(lambda2-lambda3)*(lambda2-kme))+exp(-t*lambda3)*(C-B*lambda3)/((lambda1-lambda3)*(lambda3-lambda2)*(lambda3-kme))-exp(-t*kme)*(B*kme-C)/((lambda1-kme)*(kme-lambda2)*(kme-lambda3)))
Amterm3 = km*Doserate*((E2*E3)/(lambda1*lambda2*lambda3*kme)-exp(-t*lambda1)*(E2-lambda1)*(E3-lambda1)/(lambda1*(kme-lambda1)*(lambda2-lambda1)*(lambda3-lambda1))-exp(-t*lambda2)*(E2-lambda2)*(E3-lambda2)/(lambda2*(kme-lambda2)*(lambda1-lambda2)*(lambda3-lambda2))-exp(-t*lambda3)*(E2-lambda3)*(E3-lambda3)/(lambda3*(kme-lambda3)*(lambda1-lambda3)*(lambda2-lambda3))-exp(-t*kme)*(E2-kme)*(E3-kme)/(kme*(lambda1-kme)*(lambda2-kme)*(lambda3-kme)))
return(Amterm1+Amterm2+Amterm3)
}
c_1 <- function(t) a_1(t)/v1
c_2 <- function(t) a_2(t)/v2
c_3 <- function(t) a_3(t)/v3
c_4 <- function(t) a_4(t)/v4
out <- list(c_1=c_1, c_2=c_2, c_3=c_3, c_4=c_4)
attributes(out) <- list(infusion = kR, param = pars, initial = init)
return(out)
}
attributes(pk_basic_solution_3cpt_metab) <- list(ncompartments = 4)
pk_basic_solution_3cpt_metab(kR = 1, pars = pars_3cpt)[[1]](0)
con3cpt <- pk_basic_solution_3cpt_metab(kR = 1, pars = pars_3cpt)
con3cpt
con3cpt[[1]]
con3cpt[[1]](0)
con3cpt[[1]](0:10)
#' A function to return the basic solution for a one compartment PK model.
#'
#' @param kR A numeric value specifying an infusion rate.
#' @param pars A named vector of PK parameters with names "k10" "v" or alternately "CL" and "v".
#' @param init Optional initial concentration in central compartment.
#' @return A function that calculates compartment concentrations as a function of time for the specified PK model.
#' @export
pk_basic_solution_1cpt <- function(kR, pars, init = 0){
# parameters should be named list with values "k10","v" OR "CL","v"
list2env(as.list(pars), envir = environment())
if("CL" %in% ls()){
k10 <- CL / v
}
init_amt <- init * v1
a_1 <- function(t) kR/k10*(1-exp(-t*k10))+init_amt*exp(-t*k10)
c_1 <- function(t) a_1(t)/v1
out <- list(c_1=c_1)
attributes(out) <- c(attributes(out), list(infusion = kR, param = pars, initial = init))
return(out)
}
attributes(pk_basic_solution_1cpt) <- list(ncompartments = 1)
#' @examples
#' pars_1cpt <- exp(c(k10=-2.496,v1=2.348))
#' pk_basic_solution_1cpt(kR = 10, pars = pars_1cpt)
custom_pk1cpt <- function(kR, pars, init){
}
#' A function to return the basic solution for a two compartment PK model.
#'
#' @param kR A numeric value specifying an infusion rate.
#' @param pars A named list of PK parameters with names ("k10","k12","k21","v1","v2) or alternately ("Cl","Q","v1","v2).
#' Elimination from the second compartment can be permitted by including "k20" within the list of parameters.
#' @param init Optional initial concentration in central compartment. Default is to assume no existing medication in either compartment.
#' @return A function that calculates compartment concentrations as a function of time for the specified PK model.
#' @export
pk_basic_solution_2cpt <- function(kR, pars, init=c(0,0)){
list2env(as.list(pars), envir = environment())
if("CL" %in% ls()){
k10 <- CL / v1
k12 <- Q / v1
k21 <- Q / v2
}
if(!("k20" %in% ls())){
k20 <- 0
}
E1 <- k10+k12
E2 <- k21+k20
#calculate hybrid rate constants
lambda1 = 0.5*((E1+E2)+sqrt((E1+E2)^2-4*(E1*E2-k12*k21)))
lambda2 = 0.5*((E1+E2)-sqrt((E1+E2)^2-4*(E1*E2-k12*k21)))
A1last <- init[1]*v1
A2last <- init[2]*v2
Doserate <- kR
a_1 <- function(t) {
A1term1 = (((A1last*E2+Doserate+A2last*k21)-A1last*lambda1)*exp(-t*lambda1)-((A1last*E2+Doserate+A2last*k21)-A1last*lambda2)*exp(-t*lambda2))/(lambda2-lambda1)
A1term2 = Doserate*E2*(1/(lambda1*lambda2)+exp(-t*lambda1)/(lambda1*(lambda1-lambda2))-exp(-t*lambda2)/(lambda2*(lambda1-lambda2)))
return(A1term1+A1term2)
}
a_2 <- function(t) {
A2term1 = (((A2last*E1+A1last*k12)-A2last*lambda1)*exp(-t*lambda1)-((A2last*E1+A1last*k12)-A2last*lambda2)*exp(-t*lambda2))/(lambda2-lambda1)
A2term2 = Doserate*k12*(1/(lambda1*lambda2)+exp(-t*lambda1)/(lambda1*(lambda1-lambda2))-exp(-t*lambda2)/(lambda2*(lambda1-lambda2)))
return(A2term1+A2term2)
}
c_1 <- function(t) a_1(t)/v1
c_2 <- function(t) a_2(t)/v2
out <- list(c_1=c_1, c_2=c_2)
attributes(out) <- list(infusion = kR, param = pars, initial = init)
return(out)
}
attributes(pk_basic_solution_2cpt) <- list(ncompartments = 2)
#' A function to return the basic solution for a three compartment PK model with a metabolite compartment.
#'
#' @param kR A numeric value specifying an infusion rate.
#' @param pars A named list of PK parameters with names ("k10","k12","k21","k13","k31" "v1","v2","v3","ke0").
#' Elimination from the second or third compartments can be permitted by including "k20" or "k30", respectively within the list of parameters.
#' @param init Optional initial concentration in central compartment. Default is to assume no existing medication in any compartment.
#' @return A function that calculates compartment concentrations as a function of time for the specified PK model.
#' @export
pk_basic_solution_3cpt_metab <- function(kR, pars, init=c(0,0,0,0)) {
# browser()
list2env(as.list(pars), envir = environment())
if(!("k20" %in% ls())){
k20 <- 0
}
if(!("k30" %in% ls())){
k30 <- 0
}
kme <- ke0 # k41
# km  <- kme / 1e5 # k14 Absorption into the effect site is much slower than elimination --> as soon as any drug enters, it is eliminated
# v4  <- v1 / 1e5
km = 0
v4 = 0
k20 <- 0
k30 <- 0
E1 <- k10+k12+k13+km
E2 <- k21+k20
E3 <- k31+k30
a <- E1+E2+E3
b <- E1*E2+E3*(E1+E2)-k12*k21-k13*k31
c <- E1*E2*E3-E3*k12*k21-E2*k13*k31
m <- (3*b - a^2)/3
n <- (2*a^3 - 9*a*b + 27*c)/27
Q <- (n^2)/4 + (m^3)/27
alpha <- sqrt(-1*Q)
beta <- -1*n/2
gamma <- sqrt(beta^2+alpha^2)
theta <- atan2(alpha,beta)
lambda1 <- a/3 + gamma^(1/3)*(cos(theta/3) + sqrt(3)*sin(theta/3))
lambda2 <- a/3 + gamma^(1/3)*(cos(theta/3) - sqrt(3)*sin(theta/3))
lambda3 <- a/3 -(2*gamma^(1/3)*cos(theta/3))
A1last <- init[1]*v1
A2last <- init[2]*v2
A3last <- init[3]*v3
Amlast <- init[4]*v4
Doserate <- kR
B = A2last*k21+A3last*k31
C = E3*A2last*k21+E2*A3last*k31
I = A1last*k12*E3-A2last*k13*k31+A3last*k12*k31
J = A1last*k13*E2+A2last*k13*k21-A3last*k12*k21
# return concentration functions
a_1 <- function(t) {
A1term1 = A1last*(exp(-t*lambda1)*(E2-lambda1)*(E3-lambda1)/((lambda2-lambda1)*(lambda3-lambda1))+exp(-t*lambda2)*(E2-lambda2)*(E3-lambda2)/((lambda1-lambda2)*(lambda3-lambda2))+exp(-t*lambda3)*(E2-lambda3)*(E3-lambda3)/((lambda1-lambda3)*(lambda2-lambda3)))
A1term2 = exp(-t*lambda1)*(C-B*lambda1)/((lambda1-lambda2)*(lambda1-lambda3))+exp(-t*lambda2)*(B*lambda2-C)/((lambda1-lambda2)*(lambda2-lambda3))+exp(-t*lambda3)*(B*lambda3-C)/((lambda1-lambda3)*(lambda3-lambda2))
A1term3 = Doserate*((E2*E3)/(lambda1*lambda2*lambda3)-exp(-t*lambda1)*(E2-lambda1)*(E3-lambda1)/(lambda1*(lambda2-lambda1)*(lambda3-lambda1))-exp(-t*lambda2)*(E2-lambda2)*(E3-lambda2)/(lambda2*(lambda1-lambda2)*(lambda3-lambda2))-exp(-t*lambda3)*(E2-lambda3)*(E3-lambda3)/(lambda3*(lambda1-lambda3)*(lambda2-lambda3)))
return(A1term1+A1term2+A1term3)
}
a_2 <- function(t) {
A2term1 = A2last*(exp(-t*lambda1)*(E1-lambda1)*(E3-lambda1)/((lambda2-lambda1)*(lambda3-lambda1))+exp(-t*lambda2)*(E1-lambda2)*(E3-lambda2)/((lambda1-lambda2)*(lambda3-lambda2))+exp(-t*lambda3)*(E1-lambda3)*(E3-lambda3)/((lambda1-lambda3)*(lambda2-lambda3)))
A2term2 = exp(-t*lambda1)*(I-A1last*k12*lambda1)/((lambda1-lambda2)*(lambda1-lambda3))+exp(-t*lambda2)*(A1last*k12*lambda2-I)/((lambda1-lambda2)*(lambda2-lambda3))+exp(-t*lambda3)*(A1last*k12*lambda3-I)/((lambda1-lambda3)*(lambda3-lambda2))
A2term3 = Doserate*k12*(E3/(lambda1*lambda2*lambda3)-exp(-t*lambda1)*(E3-lambda1)/(lambda1*(lambda2-lambda1)*(lambda3-lambda1))-exp(-t*lambda2)*(E3-lambda2)/(lambda2*(lambda1-lambda2)*(lambda3-lambda2))-exp(-t*lambda3)*(E3-lambda3)/(lambda3*(lambda1-lambda3)*(lambda2-lambda3)))
return(A2term1+A2term2+A2term3)
}
a_3 <- function(t) {
A3term1 = A3last*(exp(-t*lambda1)*(E1-lambda1)*(E2-lambda1)/((lambda2-lambda1)*(lambda3-lambda1))+exp(-t*lambda2)*(E1-lambda2)*(E2-lambda2)/((lambda1-lambda2)*(lambda3-lambda2))+exp(-t*lambda3)*(E1-lambda3)*(E2-lambda3)/((lambda1-lambda3)*(lambda2-lambda3)))
A3term2 = exp(-t*lambda1)*(J-A1last*k13*lambda1)/((lambda1-lambda2)*(lambda1-lambda3))+exp(-t*lambda2)*(A1last*k13*lambda2-J)/((lambda1-lambda2)*(lambda2-lambda3))+exp(-t*lambda3)*(A1last*k13*lambda3-J)/((lambda1-lambda3)*(lambda3-lambda2))
A3term3 = Doserate*k13*(E2/(lambda1*lambda2*lambda3)-exp(-t*lambda1)*(E2-lambda1)/(lambda1*(lambda2-lambda1)*(lambda3-lambda1))-exp(-t*lambda2)*(E2-lambda2)/(lambda2*(lambda1-lambda2)*(lambda3-lambda2))-exp(-t*lambda3)*(E2-lambda3)/(lambda3*(lambda1-lambda3)*(lambda2-lambda3)))
return(A3term1+A3term2+A3term3)
}
a_4 <- function(t) {
Amterm1 = Amlast*exp(-t*kme) +km*A1last*(exp(-t*lambda1)*(E2-lambda1)*(E3-lambda1)/((lambda2-lambda1)*(lambda3-lambda1)*(kme-lambda1))+exp(-t*lambda2)*(E2-lambda2)*(E3-lambda2)/((kme-lambda2)*(lambda1-lambda2)*(lambda3-lambda2))+exp(-t*lambda3)*(E2-lambda3)*(E3-lambda3)/((kme-lambda3)*(lambda1-lambda3)*(lambda2-lambda3))+exp(-t*kme)*(E2-kme)*(E3-kme)/((lambda1-kme)*(lambda2-kme)*(lambda3-kme)))
Amterm2 = km*(exp(-t*lambda1)*(B*lambda1-C)/((lambda1-lambda2)*(lambda1-lambda3)*(lambda1-kme))+exp(-t*lambda2)*(C-B*lambda2)/((lambda1-lambda2)*(lambda2-lambda3)*(lambda2-kme))+exp(-t*lambda3)*(C-B*lambda3)/((lambda1-lambda3)*(lambda3-lambda2)*(lambda3-kme))-exp(-t*kme)*(B*kme-C)/((lambda1-kme)*(kme-lambda2)*(kme-lambda3)))
Amterm3 = km*Doserate*((E2*E3)/(lambda1*lambda2*lambda3*kme)-exp(-t*lambda1)*(E2-lambda1)*(E3-lambda1)/(lambda1*(kme-lambda1)*(lambda2-lambda1)*(lambda3-lambda1))-exp(-t*lambda2)*(E2-lambda2)*(E3-lambda2)/(lambda2*(kme-lambda2)*(lambda1-lambda2)*(lambda3-lambda2))-exp(-t*lambda3)*(E2-lambda3)*(E3-lambda3)/(lambda3*(kme-lambda3)*(lambda1-lambda3)*(lambda2-lambda3))-exp(-t*kme)*(E2-kme)*(E3-kme)/(kme*(lambda1-kme)*(lambda2-kme)*(lambda3-kme)))
return(Amterm1+Amterm2+Amterm3)
}
c_1 <- function(t) a_1(t)/v1
c_2 <- function(t) a_2(t)/v2
c_3 <- function(t) a_3(t)/v3
c_4 <- function(t) a_4(t)/v4
out <- list(c_1=c_1, c_2=c_2, c_3=c_3, c_4=c_4)
attributes(out) <- list(infusion = kR, param = pars, initial = init)
return(out)
}
attributes(pk_basic_solution_3cpt_metab) <- list(ncompartments = 4)
iterate_sol <- function(ivt, basic_sol, ...)
{
ncpt <- attr(basic_sol,"ncompartments")
basic_sol_args <- list(...)
# browser()
# if initial values aren't specified, set to 0 for all compartments
if("init" %in% names(basic_sol_args)) init <- basic_sol_args$init
else init <- rep(0,ncpt)
if(!any(sapply(ivt, is.list))) ivt <- list(ivt)
ibe <- sapply(ivt, `[[`, 'begin')
ied <- sapply(ivt, `[[`, 'end')
prd <- sort(unique(c(0, c(ibe,ied), Inf)))
rits <- list()
for(i in 1:(length(prd)-1)) {
civt <- sapply(ivt, function(iv) {
if(prd[i] >= iv$begin && prd[i] < iv$end) {
iv$k_R
} else { 0 }
})
rit <- list(begin=prd[i], end=prd[i+1],
idose=sum(civt))
if(i == 1) {
rit$init <- init
} else {
rit$init <- unname(sapply(which(sapply(rits[[i-1]], is.function)), function(j)
rits[[i-1]][[j]](rits[[i-1]]$end-rits[[i-1]]$begin)))
}
basic_sol_args$init <- rit$init
sol <- do.call(basic_sol, c(kR = rit$idose, basic_sol_args))
rits[[i]] <- c(rit, sol)
}
ret <- function(tms) {
# browser()
sapply(tms, function(t) {
val <- rep(NA,ncpt)
for(rit in rits) {
if(t >= rit$begin && t <= rit$end) {
val <- sapply(which(sapply(rit, is.function)), function(j) c(rit[[j]](t-rit$begin)))
break
}
}
val
})
}
return(ret)
}
#' @examples
#' pars_1cpt <- c(k10=1.5,v1=10)
#' pars_2cpt <- c(k10=1.5,k12=0.15,k21=0.09,v1=10,v2=15)
#' pars_3cpt <- c(k10=1.5,k12=0.15,k21=0.09,k13=0.8,k31=0.8,v1=10,v2=15,v3=100,ke0=4)
#' con1cpt <- pk_basic_solution_1cpt(kR = 1, pars = pars_1cpt)
#' con2cpt <- pk_basic_solution_2cpt(kR = 1, pars = pars_2cpt)
#' con3cpt <- pk_basic_solution_3cpt_metab(kR = 1, pars = pars_3cpt)
#' ivt_test = list(list(begin = 0, end = 1/6, k_R = 1), list(begin = 3, end = 3+1/6, k_R = 1))
#' sol_1cpt <- iterate_sol(ivt = ivt_test, basic_sol = pk_basic_solution_1cpt, pars = pars_1cpt, init = 0)
#' sol_2cpt <- iterate_sol(ivt = ivt_test, basic_sol = pk_basic_solution_2cpt, pars = pars_2cpt, init = c(0,0))
#' sol_3cpt <- iterate_sol(ivt = ivt_test, basic_sol = pk_basic_solution_3cpt_metab, pars = pars_3cpt, init = c(0,0,0,0))
#' tms <- seq(0,10,0.01)
#' plot(tms, sol_1cpt(tms), type = "l")
#' lines(tms, sol_2cpt(tms)[1,], col = 2)
#' lines(tms, sol_3cpt(tms)[1,], col = 3)
# create pkmod s3 class object
create_pkmod <- function(ncpts = c("cmpt1","cmpt2","cmpt3m"), pars, init = NULL, ivt = NULL, vcov = NULL){
if(!is.numeric(pars)) stop("PK parameters must be passed as a vector of numeric values")
# identify basic solution corresponding to specified compartment model
basic_sol_opts <- c("pk_basic_solution_1cpt","pk_basic_solution_2cpt","pk_basic_solution_3cpt_metab")
basic_sol_name <- basic_sol_opts[c("cmpt1","cmpt2","cmpt3m") == ncpts]
basic_sol <- get(basic_sol_name)
ncpt <- c(1,2,3)[c("cmpt1","cmpt2","cmpt3m") == ncpts]
pkmod <- list(basic_sol = basic_sol, pars = pars, ncpt = ncpt, init = init, ivt = ivt, vcov = vcov)
# if infusion schedule is provided, add piecewise solution to list
if(!is.null(ivt)){
if(is.null(init)){
print("Calculated solution assumes no prior medication in any compartment")
init <- formals(basic_sol)$init
}
sol <- iterate_sol(ivt, basic_sol, pars = pars, init = init)
pkmod <- c(pkmod, sol = list(sol))
}
class(pkmod) <- "pkmod"
return(pkmod)
}
#' @examples
#' pk1cpt <- create_pkmod(ncpts = "cmpt1", pars = list(k10=-2.496,v1=2.348), vcov = diag(2), ivt = list(list(begin = 0, end = 1/6, k_R = 1), list(begin = 3, end = 3+1/6, k_R = 1)))
#' class(pk1cpt)
#' create update method that changes elements of the pkmod object and (by default) changes downstream effects
#' e.g. if parameters are updated and an infusion schedule exists,
#' @param pkmod A list with class pkmod
#' @param args_update A named list of arguments to the pkmod object that are to be changed
update.pkmod <- function(pkmod, args_update){
if(!all(names(args_update) %in% attributes(pkmod)$names)){
stop(paste("Argument names must be limited to the following:", paste(attributes(pk1cpt)$names, collapse = ", ")))
}
# replace values with updated versions
pkmod[names(args_update)] <- args_update
# update pk solution if an infusion schedule has been specified - this is downstream of any updates
if(!is.null(pkmod$ivt)){
if(is.null(pkmod$init)){
print("Calculated solution assumes no prior medication in any compartment")
init <- formals(pkmod$basic_sol)$init
}
pkmod$sol <- iterate_sol(pkmod$ivt, pkmod$basic_sol, pars = pkmod$pars, init = pkmod$init)
}
return(pkmod)
}
#' @examples
#' pk1cpt <- create_pkmod(ncpts = "cmpt1", pars = c(k10=0.5,v1=5), vcov = diag(2), ivt = list(list(begin = 0, end = 1/6, k_R = 1), list(begin = 3, end = 3+1/6, k_R = 1)))
#' pk1cpt$pars
#' plot(seq(0,8,0.1), pk1cpt$sol(seq(0,8,0.1)), type = "l", xlab = "min", ylab = "concentration", ylim = c(0,0.07))
#' pars2 <- c(k10=0.3,v1=4)
#' pk1cpt <- update(pk1cpt, list(pars = pars2))
#' pk1cpt$pars
#' lines(seq(0,8,0.1), pk1cpt$sol(seq(0,8,0.1)), col = 2)
# create summary method
summary.pkmod <- function(pkmod, alpha = 0.05, ...){
browser()
lb <- pkmod$pars + qnorm(alpha/2)*diag(pkmod$vcov)
ub <- pkmod$pars - qnorm(alpha/2)*diag(pkmod$vcov)
out <- data.frame(parameters = names(pkmod$pars), value = unlist(pkmod$pars))
if(!is.null(pkmod$vcov)){
out <- cbind(out, lb = lb, ub = ub)
}
knitr::kable(out, row.names = F, ...)
}
#' @examples
#' pk1cpt <- create_pkmod(ncpts = "cmpt1", pars = k10=-2.496,v1=2.348, vcov = diag(2), ivt = list(list(begin = 0, end = 1/6, k_R = 1), list(begin = 3, end = 3+1/6, k_R = 1)))
#' summary(pk1cpt, digits = 3)
# create predict method
predict.pkmod <- function(pkmod, tms = NULL, cmpt = 1, plot_con = T){
if(is.null(pkmod$ivt)){
stop("An infusion schedule has not yet been associated with the pkmod object.
Use the 'update' function to add an infusion schedule.")
}
if(is.null(tms)){
inf_start <- pkmod$ivt[[1]]$begin
inf_end <- pkmod$ivt[[length(pkmod$ivt)]]$end
tms <- seq(inf_start, inf_end + (inf_end - inf_start), length.out = 100)
}
con_p <- pkmod$sol(tms)
# browser()
f <- function(pars) unname(iterate_sol(pkmod$ivt, pkmod$basic_sol, pars = pars, init = pkmod$init)(tms))
gd <- fdGrad(pars = pkmod$pars, fun = f)
}
#' @examples
#' pk1cpt <- create_pkmod(ncpts = "cmpt1", pars = list(k10=0.5,v1=5), vcov = diag(2), ivt = list(list(begin = 0, end = 1/6, k_R = 1), list(begin = 3, end = 3+1/6, k_R = 1)))
#' predict(pk1cpt)
# potentially keep population prior as a separate object with specifications of CDF so that
#' Finite difference gradient
#' @param pars parameters of function that gradient is evaluated with respect to.
#' @param fun function to be evaluated.
fdGrad <- function (pars, fun, ...,
.relStep = (.Machine$double.eps)^(1/2),
minAbsPar = 0) {
browser()
npar <- length(pars)
incr <- ifelse(abs(pars) <= minAbsPar, .relStep,
(abs(pars)-minAbsPar) * .relStep)
ival <- do.call(fun, list(pars, ...))
diff <- rep(0,npar)
sapply(1:npar, function(i) {
del <- rep(0,npar)
del[i] <- incr[i]
(do.call(fun, list(pars+del, ...))-ival)/incr[i]
})
}
## perform quadrature of multivariate normal
#' Compute Gauss-Hermite quadrature points and weights for a one-dimensional integral.
#' @param points -- number of points
#' @param interlim -- maximum number of Newton-Raphson iterations
hermite <- function (points, z) {
p1 <- 1/pi^0.4
p2 <- 0
for (j in 1:points) {
p3 <- p2
p2 <- p1
p1 <- z * sqrt(2/j) * p2 - sqrt((j - 1)/j) * p3
}
pp <- sqrt(2 * points) * p2
c(p1, pp)
}
gauss.hermite <- function (points, iterlim = 50) {
x <- w <- rep(0, points)
m <- (points + 1)/2
for (i in 1:m) {
z <- if (i == 1)
sqrt(2 * points + 1) - 2 * (2 * points + 1)^(-1/6)
else if (i == 2)
z - sqrt(points)/z
else if (i == 3 || i == 4)
1.9 * z - 0.9 * x[i - 2]
else 2 * z - x[i - 2]
for (j in 1:iterlim) {
z1 <- z
p <- hermite(points, z)
z <- z1 - p[1]/p[2]
if (abs(z - z1) <= 1e-15)
break
}
if (j == iterlim)
warning("iteration limit exceeded")
x[points + 1 - i] <- -(x[i] <- z)
w[i] <- w[points + 1 - i] <- 2/p[2]^2
}
r <- cbind(x * sqrt(2), w/sum(w))
colnames(r) <- c("Points", "Weights")
r
}
#' Compute multivariate Gaussian quadrature points
#' @param n     - number of points each dimension before pruning
#' @param mu    - mean vector
#' @param sigma - covariance matrix
#' @param prune - NULL - no pruning; (0-1) - fraction to prune
mgauss.hermite <- function(n, mu, sigma, prune=NULL) {
if(!all(dim(sigma) == length(mu)))
stop("mu and sigma have nonconformable dimensions")
dm  <- length(mu)
gh  <- gauss.hermite(n)
#idx grows exponentially in n and dm
idx <- as.matrix(expand.grid(rep(list(1:n),dm)))
pts <- matrix(gh[idx,1],nrow(idx),dm)
wts <- apply(matrix(gh[idx,2],nrow(idx),dm), 1, prod)
## prune
if(!is.null(prune)) {
qwt <- quantile(wts, probs=prune)
pts <- pts[wts > qwt,]
wts <- wts[wts > qwt]
}
## rotate, scale, translate points
eig <- eigen(sigma)
rot <- eig$vectors %*% diag(sqrt(eig$values))
pts <- t(rot %*% t(pts) + mu)
return(list(points=pts, weights=wts))
}
test_that("create_pkmod parameters are entered correctly", {
expect_error(create_pkmod(ncpts = "cmpt1", pars = list(k10=-2.496,v1=2.348), vcov = diag(2), ivt = list(list(begin = 0, end = 1/6, k_R = 1), list(begin = 3, end = 3+1/6, k_R = 1))))
expect_error(create_pkmod(ncpts = "cmpt1", pars = c(k10="-2.496",v1="2.348"), vcov = diag(2), ivt = list(list(begin = 0, end = 1/6, k_R = 1), list(begin = 3, end = 3+1/6, k_R = 1))))
})
