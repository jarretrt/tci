data <- data.frame(ID = 1:5, AGE = seq(20,60,by=10), TBW = seq(60,80,by=5),
HGT = seq(150,190,by=10), MALE = c(TRUE,TRUE,FALSE,FALSE,FALSE))
init_poppkmod(data, drug = "ppf", model = "eleveld")
poppkmod_obj <- list(data = data)
attr(poppkmod_obj,"drug")
attr(poppkmod_obj,"drug") <- drug
attr(poppkmod_obj,"model") <- model
class(poppkmod_obj) <- "poppkmod"
poppkmod_obj
attr(poppkmod_obj,"drug")
attr(poppkmod_obj,"model")
poppkmod_obj
str(poppkmod_obj)
data <- data.frame(ID = 1:5, AGE = seq(20,60,by=10), TBW = seq(60,80,by=5),
HGT = seq(150,190,by=10), MALE = c(TRUE,TRUE,FALSE,FALSE,FALSE))
library(tci)
poppkmod(data, drug = "ppf", model = "eleveld")
debug(validate_poppkmod)
poppkmod(data, drug = "ppf", model = "eleveld")
library(tci)
poppkmod(data, drug = "ppf", model = "eleveld")
library(tci)
poppkmod(data, drug = "ppf", model = "eleveld")
library(tci)
library(tci)
poppkmod(data, drug = "ppf", model = "eleveld")
poppkmod(data, drug = "remi", model = "kim")
library(tci)
library(ggplot2)   # ggplot for plotting
library(gridExtra) # arrangeGrob to arrange plots
library(reshape2)  # melt function
# 1-compartment model
(mod1cpt <- pkmod(pars_pk = c(cl = 10, v = 15)))
# 3-compartment model with effect site
(mod3ecpt <- pkmod(pars_pk = c(cl = 10, q2 = 2, q3 =20, v = 15, v2 = 30, v3 = 50, ke0 = 1.2)))
# acceptable parameter names
list_parnms()
library(tci)
# acceptable parameter names
list_parnms()
format_pars
library(tci)
library(tci)
library(ggplot2)   # ggplot for plotting
library(gridExtra) # arrangeGrob to arrange plots
library(reshape2)  # melt function
# 1-compartment model
(mod1cpt <- pkmod(pars_pk = c(cl = 10, v = 15)))
# 3-compartment model with effect site
(mod3ecpt <- pkmod(pars_pk = c(cl = 10, q2 = 2, q3 =20, v = 15, v2 = 30, v3 = 50, ke0 = 1.2)))
# acceptable parameter names
list_parnms()
update(mod3ecpt, pars_pk = c(ke0 = 0.9), init = c(1,0.2,0.3,1))
# single infusion
(single_inf <- inf_manual(inf_tms = 0, duration = 0.5, inf_rate = 100))
# multiple infusions
(multi_inf <- inf_manual(inf_tms = c(0,3,6), duration = c(1,0.5,0.25), inf_rate = 100))
# plasma targeting for one-compartment model
inf_1cpt <- inf_tci(target_vals = c(2,3,4,4), target_tms = c(0,2,3,10),
pkmod = mod1cpt, type = "plasma")
head(inf_1cpt)
# effect-site targeting for three-compartment effect site model
inf_3ecpt <- inf_tci(target_vals = c(2,3,4,4), target_tms = c(0,2,3,10),
pkmod = mod3ecpt, type = "effect")
head(inf_3ecpt)
# prediction/observation times
tms_pred <- seq(0,10,0.01)
tms_obs <- c(0.5,1,2,4,6,10)
pre <- predict(mod3ecpt, inf = inf_3ecpt, tms = tms_pred)
obs <- simulate(mod3ecpt, seed = 1, inf = inf_3ecpt, tms = tms_obs, sigma_mult = 0.2)
# plot results
dat <- data.frame(time = tms_pred, `plasma (3 cmpt)` = pre[,"c1"],
`effect (ke0=1.2)` = pre[,"c4"],
check.names = FALSE)
datm <- melt(dat, id = "time")
dat_obs <- data.frame(time = tms_obs, con = obs, variable = "plasma (3 cmpt)")
p <- ggplot(datm, aes(x = time, y = value, color = variable)) +
geom_line() +
geom_point(data = dat_obs, aes(x = time, y = con)) +
xlab("Minutes") + ylab("Concentration (mg/L)")
p
# evaluate with different ke0 parameter
pre_misspec <- predict(mod3ecpt, inf = inf_3ecpt, tms = tms_pred,
pars_pk = c(ke0 = 0.8))
dat_misspec <- data.frame(pre_misspec, variable = "effect (ke0=0.8)", time = tms_pred)
p + geom_line(data = dat_misspec, aes(x = time, y = c4, color = variable))
# predicted concentrations
pre_1cpt <- predict(mod1cpt, inf = inf_3ecpt, tms = tms_pred)
dat_1cpt <- data.frame(pre_1cpt, variable = "plasma (1 cmpt)", time = tms_pred)
# simulated observations
obs_1cpt <- simulate(mod1cpt, seed = 1, inf = inf_3ecpt, tms = tms_obs, sigma_mult = 0.2)
p + geom_line(data = dat_1cpt, aes(x = time, y = c1, color = variable)) +
geom_point(data = data.frame(time = tms_obs, con = obs_1cpt, variable = "plasma (1 cmpt)"),
aes(x = time, y = con), inherit.aes = FALSE, color = "green4")
modpd <- update(mod3ecpt, pdfn = emax, pdinv = emax_inv,
pars_pd = c(e0 = 100, emx = 100, c50 = 3.5, gamma = 2.2))
inf_pd <- inf_tci(target_vals = c(70,60,50,50), target_tms = c(0,2,3,10), pkmod = modpd, type = "effect")
# predict responses
pre_pd <- predict(modpd, inf = inf_pd, tms = tms_pred)
# pd observations: 10 sec = 1/6 min
tms_pd_obs <- seq(1/6,10,1/6)
# simulate responses with additive error and parameter misspecification
obs_pd <- simulate(modpd, seed = 1, inf = inf_pd, tms = tms_pd_obs, sigma_add = 5,
pars_pk = c(ke0 = 0.7), pars_pd = c(c50 = 3, gamma = 1.8))
# plot results
dat_pd <- data.frame(time = tms_pred, `plasma (3 cmpt)` = pre_pd[,"c1"],
`effect (ke0=1.2)` = pre_pd[,"c4"],
BIS = pre_pd[,"pdresp"],
check.names = FALSE)
dat_pdm <- melt(dat_pd, id = "time")
dat_pdm$type <- as.factor(ifelse(dat_pdm$variable == "BIS", "PD","PK"))
dat_pd_obs <- data.frame(time = tms_pd_obs, BIS = obs_pd,
type = factor("PD"), variable = "BIS")
levels(dat_pdm$type) <- levels(dat_pd_obs$type) <- c("Bispectral Index", "Concentration (mg/L)")
ggplot(dat_pdm, aes(x = time, y = value, color = variable)) +
facet_wrap(type~., scales = "free", nrow = 2) +
geom_line() +
geom_point(data = dat_pd_obs, aes(x = time, y = BIS)) +
xlab("Minutes") + ylab("")
mod_true  <- update(mod3ecpt, pars_pk = c(cl = 20, q2 = 1.5, ke0 = 1.8))
sim_ol <- simulate_olc(pkmod_prior = mod3ecpt,
pkmod_true = mod_true,
target_vals = c(2,3,4,4),
target_tms = c(0,2,3,24),
obs_tms = c(1,2,4,8,12,16,24),
seed = 1)
ggplot(melt(sim_ol$resp, id.vars = c("time","type"))) +
geom_line(aes(x = time, y = value, color = variable)) +
geom_point(data = sim_ol$obs, aes(x = time, y = obs)) +
facet_wrap(~type) +
labs(x = "Hours", y = "Concentration (mg/L)")
# TCI targets - 3 doses (hour-long infusions) at 24h intervals calculated to
# reach 3 mg/L plasma concentration
target_tms <- c(0,1,24,25,48,49,72)
target_vals <- c(3,0,3,0,3,0,0)
# Measurement and model update times
obs_tms <- c(1,2,4,8,12,16,23,25,36,47)
update_tms <- c(24,48)
# Omega matrix describing inter-individual variability in prior pkmod object
prior_vcov <- matrix(diag(c(0.265,0.610,0.463)),
3,3, dimnames = list(NULL,c('cl','v','sigma_mult')))
# prior pkmod: 1 compartment model
pkmod_prior <- update(mod1cpt, Omega = prior_vcov, sigma_mult = 0.2)
# true pkmod - 3 compartment model with effect-site
pkmod_true <- update(mod3ecpt, sigma_mult = 0.3)
# run simulation
sim_cl <- simulate_clc(pkmod_prior, pkmod_true, target_vals, target_tms,
obs_tms, update_tms, type = "plasma", seed = 1)
len <- 1e3
tms <- seq(0,48,length.out = len)
# true, prior, posterior plasma concentrations
ctrue <- predict(pkmod_true, sim_cl$inf,tms)[,1]
cprior <- predict(pkmod_prior, sim_cl$inf,tms)[,1]
cpost <-  predict(sim_cl$pkmod_post, sim_cl$inf,tms)[,1]
df <- data.frame(time = rep(tms,3),
value = c(ctrue, cprior, cpost),
model = c(rep("true",len),rep("prior",len),rep("posterior",len)))
p1 <- ggplot(df, aes(x = time, y = value, color = model)) +
geom_line() +
geom_point(data = sim_cl$obs, aes(x = time, y = obs), inherit.aes = FALSE) +
labs(x = "Time (h)", y = "Concentration (mg/L)") +
geom_vline(xintercept = update_tms, linetype = "dotted", alpha = 0.6)
p2 <- ggplot(as.data.frame(sim_cl$inf), aes(x = begin, y = inf_rate)) +
geom_line() +
labs(x = "Time (h)", y = "Infusion rate (mg/h)")
plot(arrangeGrob(p1,p2, ncol = 2))
pkpd_prior_vcov <- matrix(diag(c(0.265,0.346,0.209,0.702,0.242,0.230)),6,6,
dimnames = list(NULL,c('cl','q2','q3','ke0','c50',
'sigma_add')))
pkpdmod_prior <- update(modpd, sigma_add = 6, Omega = pkpd_prior_vcov)
pkpdmod_true <- update(modpd, sigma_add = 7,
pars_pk = c(cl = 20,q2=6,q3=50,ke0=0.8),
pars_pd = c(c50=2.5))
obs_tms <- seq(1/6,10,1/6)
update_tms <- seq(1,10,0.5)
sim_pkpd <- simulate_clc(pkmod_prior = pkpdmod_prior,
pkmod_true = pkpdmod_true,
target_vals = c(50,50),
target_tms = c(0,10),
obs_tms = obs_tms,
update_tms = update_tms,
seed = 1, delay = 0.5)
# plot results
tms <- seq(0,10,length.out = len)
resp_true <- predict(pkpdmod_true, sim_pkpd$inf,tms)[,5]
resp_prior <- predict(pkpdmod_prior, sim_pkpd$inf,tms)[,5]
resp_post  <- predict(sim_pkpd$pkmod_post, sim_pkpd$inf, tms)[,5]
df <- data.frame(time = rep(tms,3),
value = c(resp_true, resp_prior, resp_post),
model = c(rep("true",len),rep("prior",len),rep("posterior",len)))
ggplot(df, aes(x = time, y = value, color = model)) +
geom_line() +
geom_point(data = sim_pkpd$obs, aes(x = time, y = obs), inherit.aes = FALSE) +
labs(x = "Hours", y = "Bispectral Index") +
geom_vline(xintercept = update_tms, linetype = "dotted", alpha = 0.6) +
geom_hline(yintercept = 50)
data <- data.frame(ID = 1:5,
AGE = seq(20,60,by=10),
TBW = seq(60,80,by=5),
HGT = seq(150,190,by=10),
MALE = c(TRUE,TRUE,FALSE,FALSE,FALSE))
my_mod <- poppkmod(data, drug = "ppf", model = "eleveld")
# update a subset of parameters and initial values
poppkmod(data, drug = "ppf", model = "eleveld")
update(my_mod, pars_pk = c(CL = 4))$pkmods
update(my_mod, pars_pk = list(CL = 1:5, Q2 = 3))$pkmods
data <- data.frame(ID = 1:5,
AGE = seq(20,60,by=10),
TBW = seq(60,80,by=5),
HGT = seq(150,190,by=10),
MALE = c(TRUE,TRUE,FALSE,FALSE,FALSE))
poppkmod(data, drug = "ppf", model = "eleveld")
poppkmod(data, drug = "remi", model = "kim")
my_mod
update(my_mod, pars_pk = c(CL = 4))$pkmods
update(my_mod, pars_pk = c(Q2 = c(1:5)))$pkmods
update(my_mod, pars_pk = c(CL = 4))$pkmods
update(my_mod, pars_pk = c(CL = 4))
my_mod$pkmods
update(my_mod, pars_pk = c(Q2 = c(1:5)))$pkmods
update(my_mod, pars_pk = list(CL = 1:5, Q2 = 5:1))$pkmods
debug(update.poppkmod)
debug(tci::update.poppkmod)
#' @export
update.poppkmod <- function(object, ...){
update_elements <- list(...)
if(length(update_elements) == 0) return(object)
if(is.list(update_elements[[1]])) update_elements <- update_elements[[1]]
# subset to elements with valid names
update_elements <- update_elements[names(update_elements) %in% c(names(formals(pkmod)))]
nid <- length(object$pkmods)
for(i in 1:length(update_elements)){
if(!length(update_elements[[i]]) %in% c(1,nid))
stop("Arguments must have length 1 or length(data$ID)")
if(length(update_elements[[i]]) == 1){
object$pkmods <- lapply(object$pkmods, update, update_elements[i])
} else{
object$pkmods <- lapply(1:length(object$pkmods), function(j){
elm <- list(update_elements[[i]][j])
names(elm[[1]]) <- gsub(paste0(j,"$"), "", names(elm[[1]]))
names(elm) <- names(update_elements)[i]
update(object$pkmods[[j]], elm)
})
}
}
return(validate_poppkmod(object))
}
debug(update.poppkmod)
update(my_mod, pars_pk = list(CL = 1:5, Q2 = 5:1))$pkmods
update_elements[[1]]
update_elements[[1]]
is.list(update_elements[[1]])
update_elements
names(update_elements)
update_elements <- list(...)
update_elements <- update_elements[[1]]
names(update_elements)
c(names(formals(pkmod)))
pkmod$pars_pk
pkmod
formals(pkmod)
formals(pkmod)$pars_pk
pkmod
object
formals(object)
object
object$pkmods
object$pkmods[[1]]
names(object$pkmods[[1]])
names(object$pkmods[[1]]$pars_pk)
c(names(formals(object)),
names(object$pkmods[[1]]$pars_pk),
names(object$pkmods[[1]]$pars_pd))
names(formals(object))
object
names(update_elements)
#' @export
update.poppkmod <- function(object, ...){
update_elements <- list(...)
if(length(update_elements) == 0) return(object)
if(is.list(update_elements[[1]])) update_elements <- update_elements[[1]]
# subset to elements with valid names
update_elements <- update_elements[names(update_elements) %in%
c(names(formals(object)),
names(object$pkmods[[1]]$pars_pk),
names(object$pkmods[[1]]$pars_pd))]
nid <- length(object$pkmods)
for(i in 1:length(update_elements)){
if(!length(update_elements[[i]]) %in% c(1,nid))
stop("Arguments must have length 1 or length(data$ID)")
if(length(update_elements[[i]]) == 1){
object$pkmods <- lapply(object$pkmods, update, update_elements[i])
} else{
object$pkmods <- lapply(1:length(object$pkmods), function(j){
elm <- list(update_elements[[i]][j])
names(elm[[1]]) <- gsub(paste0(j,"$"), "", names(elm[[1]]))
names(elm) <- names(update_elements)[i]
update(object$pkmods[[j]], elm)
})
}
}
return(validate_poppkmod(object))
}
debug(update.poppkmod)
update(my_mod, pars_pk = c(Q2 = c(1:5)))$pkmods
update_elements
is.list(update_elements[[1]])
names(update_elements)
names(formals(object)
)
update_elements[names(update_elements) %in%
c(names(formals(object)),
names(object$pkmods[[1]]$pars_pk),
names(object$pkmods[[1]]$pars_pd))]
object
names(object)
object$pkmods
names(object$pkmods)
names(object$pkmods[[1]])
pkmod
formals(pkmod)
update(my_mod, pars_pk = list(CL = 1:5, Q2 = 5:1))$pkmods
update_elements
names(formals(object))
#' @export
update.poppkmod <- function(object, ...){
update_elements <- list(...)
if(length(update_elements) == 0) return(object)
if(is.list(update_elements[[1]])) update_elements <- update_elements[[1]]
# subset to elements with valid names
update_elements <- update_elements[names(update_elements) %in%
c(names(formals(pkmod)),
names(object$pkmods[[1]]$pars_pk),
names(object$pkmods[[1]]$pars_pd))]
nid <- length(object$pkmods)
for(i in 1:length(update_elements)){
if(!length(update_elements[[i]]) %in% c(1,nid))
stop("Arguments must have length 1 or length(data$ID)")
if(length(update_elements[[i]]) == 1){
object$pkmods <- lapply(object$pkmods, update, update_elements[i])
} else{
object$pkmods <- lapply(1:length(object$pkmods), function(j){
elm <- list(update_elements[[i]][j])
names(elm[[1]]) <- gsub(paste0(j,"$"), "", names(elm[[1]]))
names(elm) <- names(update_elements)[i]
update(object$pkmods[[j]], elm)
})
}
}
return(validate_poppkmod(object))
}
update(my_mod, pars_pk = c(CL = 4))$pkmods
update(my_mod, pars_pk = c(Q2 = c(1:5)))$pkmods
debug(update.poppkmod)
update(my_mod, pars_pk = c(Q2 = c(1:5)))$pkmods
names(update_elements)
update_elements
update_elements
j = 1
elm <- list(update_elements[[i]][j])
elm
gsub(paste0(j,"$"), "", names(elm[[1]]))
names(elm[[1]])
names(elm[[1]])
names(elm)
names(update_elements)[i]
update(my_mod, pars_pk = list(CL = 1:5, Q2 = 5:1))$pkmods
names(update_elements)
update_elements
update_elements[names(update_elements) %in%
c(names(formals(pkmod)),
names(object$pkmods[[1]]$pars_pk),
names(object$pkmods[[1]]$pars_pd))]
object$pkmods[[1]]
names(object$pkmods[[1]])
library(tci)
devtools::document()
library(tci)
# load packages
library(tci)
library(knitr)
library(gridExtra)
# 1-compartment model
(mod1cpt <- pkmod(pars_pk = c(cl = 10, v = 15)))
# 3-compartment model with effect site
(mod3ecpt <- pkmod(pars_pk = c(cl = 10, q2 = 2, q3 =20, v = 15, v2 = 30, v3 = 50, ke0 = 1.2)))
inf_tci
apply_tci
mod1cpt
inf_tci(target_vals = c(2,3,4,4), target_tms = c(0,2,3,10),
pkmod = mod1cpt, type = "plasma")
inf_tci(target_vals = c(2,3,4,4), target_tms = c(0,2,3,10),
pkmod = mod3ecpt, type = "effect")
inf_tci(target_vals = c(2,3,4,4), target_tms = c(0,2,3,10),
pkmod = mod3ecpt)
poppkmod()
?poppkmod
data <- data.frame(ID = 1:5, AGE = seq(20,60,by=10), TBW = seq(60,80,by=5),
HGT = seq(150,190,by=10), MALE = c(TRUE,TRUE,FALSE,FALSE,FALSE))
data <- data.frame(ID = 1:5, AGE = seq(20,60,by=10),
TBW = seq(60,80,by=5), HGT = seq(150,190,by=10),
MALE = c(TRUE,TRUE,FALSE,FALSE,FALSE))
pkmod_eleveld_ppf(data = data)
poppkmod(data = data, model = "eleveld", drug = "ppf")
pkpd_elvd <- poppkmod(data = data, model = "eleveld", drug = "ppf")
validate_poppkmod
devtools::document()
?poppkmod
library(tci)
library(tci)
?poppkmod
devtools::document()
library(tci)
?poppkmod
devtools::document()
library(tci)
?poppkmod
poppkmod
predict(elvd_mod, inf = dose, tms = c(1.5,2.5,3))
?inf_tci
inf_poppk <- inf_tci(pkpd_elvd, target_vals = c(2,3,4,4), target_tms = c(0,2,3,10), "effect")
inf_poppk
pkpd_elvd
str(pkpd_elvd)
poppkmod
pkmod_eleveld_ppf(AGE = 40,TBW = 56,HGT=150,MALE = TRUE, PD = FALSE)
sample_pkmod(pkmod_eleveld_ppf(AGE = 40,TBW = 56,HGT=150,MALE = TRUE, PD = FALSE))
sample_pkmod(pkmod_schnider(AGE = 40,HGT=170,TBW=50,MALE=TRUE))
sample_pkmod(pkmod_schnider(AGE = 40,HGT=170,TBW=50,MALE=TRUE))
sample_pkmod(pkmod_schnider(AGE = 40,HGT=170,TBW=50,MALE=TRUE))
pkpd_elvd
pkpd_elvd$pkmods[[1]]
?sample
?inherits
pkpd_elvd
mod <- pkpd_elvd
mod$pkmods
str(mod$pkmods)
lapply(mod$pkmods, sample_pkmod, log_normal = TRUE)
sample_iiv(poppkmod(data = data, drug = "ppf", model = "eleveld"))
#' and multiplicative if TRUE, additive and normally distributed if FALSE.
#' @param ... Arguments passed to update.pkmod
#' @examples
#' # sample from single PK model
#' sample_iiv(pkmod_schnider(AGE = 40,HGT=170,TBW=50,MALE=TRUE))
#' # sample from `poppkmod`
#' data <- data.frame(ID = 1:5, AGE = seq(20,60,by=10), TBW = seq(60,80,by=5),
#' HGT = seq(150,190,by=10), MALE = c(TRUE,TRUE,FALSE,FALSE,FALSE))
#' sample_iiv(poppkmod(data = data, drug = "ppf", model = "eleveld"))
#' @export
sample_iiv <- function(mod, log_normal = TRUE, ...){
if(!inherits(mod, "pkmod") & !inherits(mod, "poppkmod"))
stop("mod must have class 'pkmod' or 'poppkmod'")
if(inherits(mod, "pkmod")){
return(sample_pkmod(mod, log_normal = log_normal, ...))
} else{
mod$pkmods <- lapply(mod$pkmods, sample_pkmod, log_normal = log_normal, ...)
return(mod)
}
}
sample_iiv(poppkmod(data = data, drug = "ppf", model = "eleveld"))
?pkmod
pkpd_elvd_iiv <- sample_iiv(pkpd_elvd)
pkpd_elvd_iiv
head(inf_poppk)
?olc
?simulate_olc
source("~/Dropbox/R Packages/tci/R/poppk_mods.R", echo=TRUE)
?poppkmod
pkpd_elvd_iiv <- sample_iiv(pkpd_elvd)
pkpd_elvd_iiv2 <- poppkmod(data = data, drug = "ppf", model = "eleveld", sample = TRUE)
pkpd_elvd_iiv[[1]]
pkpd_elvd_iiv$pkmods[[1]]
pkpd_elvd_iiv2$pkmods[[1]]
set.seed(1)
pkpd_elvd_iiv <- sample_iiv(pkpd_elvd)
set.seed(1)
pkpd_elvd_iiv2 <- poppkmod(data = data, drug = "ppf", model = "eleveld", sample = TRUE)
pkpd_elvd_iiv$pkmods[[1]]
pkpd_elvd_iiv2$pkmods[[1]]
identical(pkpd_elvd_iiv, pkpd_elvd_iiv2)
simulate_olc
target_vals = c(75,60,50,50)
target_tms = c(0,3,6,10)
# effect-site targeting
inf_poppk <- inf_tci(pkpd_elvd, target_vals, target_tms, "effect")
head(inf_poppk)
tvals = c(75,60,50,50)
ttms = c(0,3,6,10)
otms <- seq(1/6,10,1/6)
simulate_olc(pkmod_prior = pkpd_elvd, pkmod_true = pkpd_elvd_iiv,
target_vals = tvals, target_tms = ttms, obs_tms = otms,
type = "effect")
sim_olc <- simulate_olc(pkmod_prior = pkpd_elvd, pkmod_true = pkpd_elvd_iiv,
target_vals = tvals, target_tms = ttms, obs_tms = otms,
type = "effect")
library(tci)
library(ggplot2)   # ggplot for plotting
len <- 500
tms <- seq(0,10,length.out = len)
resp <- data.frame(rbind(predict(pkmod_true, sim$inf, tms),
predict(pkmod_prior, sim$inf, tms)))
resp$type = c(rep("true",len*5),rep("prior",len*5))
sim <- simulate_olc(pkmod_prior = pkpd_elvd, pkmod_true = pkpd_elvd_iiv,
target_vals = tvals, target_tms = ttms, obs_tms = otms,
type = "effect")
len <- 500
tms <- seq(0,10,length.out = len)
resp <- data.frame(rbind(predict(pkmod_true, sim$inf, tms),
predict(pkmod_prior, sim$inf, tms)))
resp$type = c(rep("true",len*5),rep("prior",len*5))
resp <- data.frame(rbind(predict(pkmod_true, sim$inf, tms),predict(pkmod_prior, sim$inf, tms)))
