pdmod_fun = pdmod_fun,
pdinv_fun = pdinv_fun,
pcmpt = pcmpt,
ecmpt = ecmpt,
sigma_add = sigma_add,
sigma_mult = sigma_mult,
log_response = log_response,
delay = delay,
omega_pk = omega_pk,
omega_pd = omega_pd,
omega_sigma = omega_sigma,
max_pdval = max_pdval,
min_pdval = min_pdval)
class(pkmod_obj) <- "pkmod"
return(pkmod_obj)
}
init_pkmod(pars = c(CL = 10, V1 = 10), pkmod_fun = pkmod1cpt, init = 0)
#' @param max_pdval Maximum allowable value of PD response.
#' @param min_pdval Minimum allowable value of PD response.
#' @return A list with class pkmod for which print, plot, predict, and simulate methods exist.
#' @rdname init_pkmod
#' @examples
#' # create a pkmod object for a one compartment model
#' init_pkmod(pars = c(CL = 10, V1 = 10), pkmod_fun = pkmod1cpt, init = 0)
#' # create a joint PK-PD model
#' init_pkmod(pars = c(v1 = 8.995, v2 = 17.297, v3 = 120.963, cl = 1.382, q2 = 0.919, q3 = 0.609, ke0 = 1.289), pkmod = pkmod3cptm, pars_pd = c(c50 = 2.8, gamma = 1.47, gamma2 = 1.89, e0 = 93, emx = 93), pdmod = emax, pdinv = inv_emax, ecmpt = 4)
#' @export
init_pkmod <- function(pkmod_fun, pars, init = NULL, pars_pd = NULL, pdmod_fun = NULL,
pdinv_fun = NULL, pcmpt = NULL, ecmpt = NULL, sigma_add = NULL,
sigma_mult = NULL, log_response = NULL, delay = NULL,
pars_pk0 = NULL, pars_pd0 = NULL, omega_pk = NULL, omega_pd = NULL,
omega_sigma = NULL, max_pdval = NULL, min_pdval = NULL){
if(!is.function(pkmod_fun)) stop("`pkmod_fun` must be a function. Available models in `tci` are 'pkmod1cpt',
'pkmod2cpt','pkmod3cpt','pkmod3cmptm'. Custom models can be specified.
See vignettes for examples.")
if(!("init" %in% names(formals(pkmod_fun)))) stop("pkmod_fun must include a vector argument
'init' with initial concentrations.")
if("ID" %in% toupper(colnames(pars))){
ids <- pars[,which(toupper(colnames(pars)) == "ID")]
pars <- pars[,-which(toupper(colnames(pars)) == "ID")]
} else{
ids <- 1:ifelse(is.matrix(pars), nrow(pars), 1)
}
## check for initial concentrations and set to zero if not specified
ncmpt <- length(eval(formals(pkmod_fun)$init))
if(is.null(init)) {
init <- rep(0,ncmpt)
}
if(is.null(pcmpt)) pcmpt = 1
pkmod_obj <- list(ids = ids,
pars = pars,
pkmod_fun = pkmod_fun,
init = init,
ncmpt = ncmpt,
pars_pd = pars_pd,
pdmod_fun = pdmod_fun,
pdinv_fun = pdinv_fun,
pcmpt = pcmpt,
ecmpt = ecmpt,
sigma_add = sigma_add,
sigma_mult = sigma_mult,
log_response = log_response,
delay = delay,
omega_pk = omega_pk,
omega_pd = omega_pd,
omega_sigma = omega_sigma,
max_pdval = max_pdval,
min_pdval = min_pdval)
class(pkmod_obj) <- "pkmod"
return(pkmod_obj)
}
init_pkmod(pars = c(CL = 10, V1 = 10), pkmod_fun = pkmod1cpt, init = 0)
init_pkmod(pars = c(v1 = 8.995, v2 = 17.297, v3 = 120.963, cl = 1.382, q2 = 0.919, q3 = 0.609, ke0 = 1.289), pkmod = pkmod3cptm, pars_pd = c(c50 = 2.8, gamma = 1.47, gamma2 = 1.89, e0 = 93, emx = 93), pdmod = emax, pdinv = inv_emax, ecmpt = 4)
my_mod <- init_pkmod(pars = c(CL = 10, V = 10), pkmod_fun = pkmod1cpt, init = 0)
validate_pkmod(my_mod)
my_mod2 <- init_pkmod(pars = c(CL = 10, V1 = 10), pkmod_fun = pkmod1cpt, init = 0)
# Schnider population PK model for propofol
dat <- data.frame(AGE  = c(20,40,65),
TBM  = c(50,70,90),
HGT  = c(150,170,200),
MALE = c(TRUE,FALSE,TRUE))
my_mod3 <- init_pkmod(pars = schnider_poppk(dat), pkmod_fun = pkmod3cptm)
validate_pkmod(my_mod3)
#' validate_pkmod(my_mod2)
#' # Schnider population PK model for propofol
#' dat <- data.frame(AGE  = c(20,40,65),
#'                   TBM  = c(50,70,90),
#'                   HGT  = c(150,170,200),
#'                   MALE = c(TRUE,FALSE,TRUE))
#' my_mod3 <- init_pkmod(pars = schnider_poppk(dat), pkmod_fun = pkmod3cptm)
#' validate_pkmod(my_mod3)
#' @return Returns a list with class "pkmod" if validation checks are passed. Returns an error if not.
#' @export
validate_pkmod <- function(x){
## verify parameters are named correctly (case indifferent)
if(is.vector(x$pars))
parnms <- tolower(names(x$pars))
else
parnms <- tolower(colnames(x$pars))
if(x$ncmpt == 1){
if(any(!(c("k10","v1") %in% parnms)) & any(!(c("cl","v1") %in% parnms)))
stop("pars must have names ('k10','v1') or ('cl','v1')")
}
if(x$ncmpt == 2){
if(any(!(c("k10","k12","k21","v1","v2") %in% parnms)) & any(!(c("cl","q2","v1","v2") %in% parnms)))
stop("pars must have names ('k10','k12','k21','v1','v2') or ('cl','q2','v1','v2')")
}
if(x$ncmpt == 3){
if(any(!(c("k10","k12","k21","k13","k31","v1","v2","v3") %in% parnms)) & any(!(c("cl","q2","q3","v1","v2","v3") %in% parnms)))
stop("pars must have names ('k10','k12','k21','k13','k31','v1','v2','v3') or ('cl','q2','q3','v1','v2','v3')")
}
if(x$ncmpt == 4){
if(any(!(c("k10","k12","k21","k13","k31","ke0","v1","v2","v3") %in% parnms)) &
any(!(c("cl","q2","q3","ke0","v1","v2","v3") %in% parnms)))
stop("pars must have names ('k10','k12','k21','k13','k31','v1','v2','v3','ke0') or ('cl','q2','q3','v1','v2','v3','ke0')")
}
## effect-site assignment/warning if PD is specified and ecmpt is not
if(!is.null(x$pdmod) & is.null(x$ecmpt)){
# warning("Effect-site compartment is not specified. Defaulting to last compartment: ecmpt = ncmpt")
x$ecmpt <- x$ncmpt
}
## check that PD parameters are specified if PD model is
if(!is.null(x$pdmod) & is.null(x$pars_pd)){
stop("pars_pd must be specified if pdmod is non-null")
x$ecmpt <- x$ncmpt
## check ordering of parameters in PD model
if(!all.equal(names(formals(x$pdmod)), c("ce","pars"))){
stop("pdmod must have arguments named c('ce','pars')")
}
}
return(x)
}
#' @param min_pdval Minimum allowable value of PD response.
#' @return A list with class pkmod for which print, plot, predict, and simulate methods exist.
#' @rdname pkmod
#' @return Returns a list with class "pkmod" if validation checks are passed. Returns an error if not.
#' @examples
#' # create a one compartment pkmod object
#' pkmod(pars = c(CL = 10, V1 = 10), pkmod_fun = pkmod1cpt, init = 0)
#' # create a three compartment pkmod object with effect site and an emax PD component
#' pkmod(pars = c(v1 = 8.995, v2 = 17.297, v3 = 120.963, cl = 1.382, q2 = 0.919, q3 = 0.609, ke0 = 1.289), pkmod = pkmod3cptm, pars_pd = c(c50 = 2.8, gamma = 1.47, gamma2 = 1.89, e0 = 93, emx = 93), pdmod = emax, pdinv = inv_emax, ecmpt = 4)
#' @export
pkmod <- function(pkmod_fun, pars, init = NULL, pars_pd = NULL, pdmod_fun = NULL,
pdinv_fun = NULL, ecmpt = NULL, sigma_add = NULL,
sigma_mult = NULL, log_response = NULL,
delay = NULL, pars_pk0 = NULL, pars_pd0 = NULL,
omega_pk = NULL, omega_pd = NULL, omega_sigma = NULL, max_pdval = NULL,
min_pdval = NULL){
if(missing(pkmod_fun)){
stop("pkmod_fun is missing. Options in package include 'pkmod1cpt', 'pkmod2cpt',
'pkmod3cpt', and 'pkmod3cptm'. User-defined functions can also be supplied.")
}
new_mod <- init_pkmod(pkmod_fun = pkmod_fun,
pars = pars,
init = init,
pars_pd = pars_pd,
pdmod_fun = pdmod_fun,
pdinv_fun = pdinv_fun,
ecmpt = ecmpt,
sigma_add = sigma_add,
sigma_mult = sigma_mult,
log_response = log_response,
delay = delay,
omega_pk = omega_pk,
omega_pd = omega_pd,
omega_sigma = omega_sigma,
max_pdval = max_pdval,
min_pdval = min_pdval)
validate_pkmod(new_mod)
}
pkmod(pars = c(CL = 10, V1 = 10), pkmod_fun = pkmod1cpt, init = 0)
# create a three compartment pkmod object with effect site and an emax PD component
pkmod(pars = c(v1 = 8.995, v2 = 17.297, v3 = 120.963, cl = 1.382, q2 = 0.919, q3 = 0.609, ke0 = 1.289), pkmod = pkmod3cptm, pars_pd = c(c50 = 2.8, gamma = 1.47, gamma2 = 1.89, e0 = 93, emx = 93), pdmod = emax, pdinv = inv_emax, ecmpt = 4)
#'
#' # eleveld population PK-PD model
#' evd_pkpd_pars <- eleveld_poppk(merge(eleveld_pk, eleveld_pd))
#' # random effect standard deviations
#' omega_pk <- c(0.610,0.565,0.597,0.265,0.346,0.209,0.463,0.702)
#' omega_pd <- c(0.242,0,0,0)
#' evd_pkmod <- pkmod(pars = evd_pkpd_pars[,1:7], pars_pd = evd_pkpd_pars[,8:11], pkmod_fun = pkmod3cptm, ecmpt = 4, pdmod_fun = emax_eleveld, pdinv_fun = inv_emax_eleveld, sigma_add = 8.03, omega_pk = omega_pk, omega_pd = omega_pd, omega_sigma = 0.230)
#' print(evd_pkmod)
#' @return Prints description of pkmod
#' @export
print.pkmod <- function(x){
cat("--- PK model -------------------------------------------", "\n")
cat(paste0(x$ncmpt,"-compartment PK model"),"\n")
cat(paste0("Number of observations/patients: ", length(unique(x$ids))),"\n")
if(is.vector(x$pars)){
cat(paste0("PK parameters: ",paste(names(x$pars), "=", x$pars,collapse = ", ")),"\n")
} else{
cat(paste0("PK parameters: ", paste(colnames(x$pars), collapse = ",")),"\n")
}
cat(paste0("Initial concentrations: ",paste0("(",paste(x$init,collapse = ","),")")),"\n")
cat(paste0("Plasma compartment: ",x$pcmpt),"\n")
if(!is.null(x$ecmpt)) cat(paste0("Effect compartment: ",x$ecmpt),"\n")
if(!all(sapply(x[c("pars_pd","delay")],is.null)))
cat("--- PD model -------------------------------------------", "\n")
if(!is.null(x$pars_pd)){
if(is.vector(x$pars_pd)){
cat(paste0("PD parameters: ",paste(names(x$pars_pd), "=", x$pars_pd,collapse = ", ")),"\n")
} else{
cat(paste0("PD parameters: ", paste(colnames(x$pars_pd), collapse = ",")),"\n")
}
}
if(!is.null(x$delay)) cat(paste0("Observation delay: ",x$delay),"\n")
if(!is.null(x$min_pdval)) cat(paste0("Minimum PD value: ",x$min_pdval),"\n")
if(!is.null(x$max_pdval)) cat(paste0("Maximum PD value: ",x$max_pdval),"\n")
if(!all(sapply(x[c("sigma_add","sigma_mult","log_response","omega_pk","omega_pd")],is.null)))
cat("--- Simulations ----------------------------------------", "\n")
if(!is.null(x$sigma_add)) cat(paste0("Additive residual error: ",x$sigma_add),"\n")
if(!is.null(x$sigma_mult)) cat(paste0("Multiplicative residual error: ",x$sigma_mult),"\n")
if(!is.null(x$log_response)) cat(paste0("Logged response: ",x$log_response),"\n")
if(!is.null(x$omega_pk)) cat(paste0("Random effect SD for PK: ",paste0("(",paste(x$omega_pk,collapse = ","),")")),"\n")
if(!is.null(x$omega_pd)) cat(paste0("Random effect SD for PD: ",paste0("(",paste(x$omega_pd,collapse = ","),")")),"\n")
if(!is.null(x$omega_sigma)) cat(paste0("Random effect SD for residual error: ",x$omega_sigma),"\n")
}
my_mod <- pkmod(pars = c(CL = 10, V1 = 10), pkmod = pkmod1cpt, init = 0)
print(my_mod)
# eleveld population PK-PD model
evd_pkpd_pars <- eleveld_poppk(merge(eleveld_pk, eleveld_pd))
# random effect standard deviations
omega_pk <- c(0.610,0.565,0.597,0.265,0.346,0.209,0.463,0.702)
omega_pd <- c(0.242,0,0,0)
evd_pkmod <- pkmod(pars = evd_pkpd_pars[,1:7], pars_pd = evd_pkpd_pars[,8:11], pkmod_fun = pkmod3cptm, ecmpt = 4, pdmod_fun = emax_eleveld, pdinv_fun = inv_emax_eleveld, sigma_add = 8.03, omega_pk = omega_pk, omega_pd = omega_pd, omega_sigma = 0.230)
print(evd_pkmod)
#'
#' # eleveld population PK-PD model
#' evd_pkpd_pars <- eleveld_poppk(merge(eleveld_pk, eleveld_pd))
#' # random effect standard deviations
#' omega_pk <- c(0.610,0.565,0.597,0.265,0.346,0.209,0.463,0.702)
#' omega_pd <- c(0.242,0,0,0)
#' evd_pkmod <- pkmod(pars = evd_pkpd_pars[,1:7], pars_pd = evd_pkpd_pars[,8:11], pkmod_fun = pkmod3cptm, ecmpt = 4, pdmod_fun = emax_eleveld, pdinv_fun = inv_emax_eleveld, sigma_add = 8.03, omega_pk = omega_pk, omega_pd = omega_pd, omega_sigma = 0.230)
#' print(evd_pkmod)
#' @return Prints description of pkmod
#' @export
print.pkmod <- function(x){
cat("--- PK model -------------------------------------------", "\n")
cat(paste0(x$ncmpt,"-compartment PK model"),"\n")
cat(paste0("Number of observations: ", length(unique(x$ids))),"\n")
if(is.vector(x$pars)){
cat(paste0("PK parameters: ",paste(names(x$pars), "=", x$pars,collapse = ", ")),"\n")
} else{
cat(paste0("PK parameters: ", paste(colnames(x$pars), collapse = ",")),"\n")
}
cat(paste0("Initial concentrations: ",paste0("(",paste(x$init,collapse = ","),")")),"\n")
cat(paste0("Plasma compartment: ",x$pcmpt),"\n")
if(!is.null(x$ecmpt)) cat(paste0("Effect compartment: ",x$ecmpt),"\n")
if(!all(sapply(x[c("pars_pd","delay")],is.null)))
cat("--- PD model -------------------------------------------", "\n")
if(!is.null(x$pars_pd)){
if(is.vector(x$pars_pd)){
cat(paste0("PD parameters: ",paste(names(x$pars_pd), "=", x$pars_pd,collapse = ", ")),"\n")
} else{
cat(paste0("PD parameters: ", paste(colnames(x$pars_pd), collapse = ",")),"\n")
}
}
if(!is.null(x$delay)) cat(paste0("Observation delay: ",x$delay),"\n")
if(!is.null(x$min_pdval)) cat(paste0("Minimum PD value: ",x$min_pdval),"\n")
if(!is.null(x$max_pdval)) cat(paste0("Maximum PD value: ",x$max_pdval),"\n")
if(!all(sapply(x[c("sigma_add","sigma_mult","log_response","omega_pk","omega_pd")],is.null)))
cat("--- Simulations ----------------------------------------", "\n")
if(!is.null(x$sigma_add)) cat(paste0("Additive residual error: ",x$sigma_add),"\n")
if(!is.null(x$sigma_mult)) cat(paste0("Multiplicative residual error: ",x$sigma_mult),"\n")
if(!is.null(x$log_response)) cat(paste0("Logged response: ",x$log_response),"\n")
if(!is.null(x$omega_pk)) cat(paste0("Random effect SD for PK: ",paste0("(",paste(x$omega_pk,collapse = ","),")")),"\n")
if(!is.null(x$omega_pd)) cat(paste0("Random effect SD for PD: ",paste0("(",paste(x$omega_pd,collapse = ","),")")),"\n")
if(!is.null(x$omega_sigma)) cat(paste0("Random effect SD for residual error: ",x$omega_sigma),"\n")
}
# initial pkmod object
my_mod <- pkmod(pars = c(CL = 10, V1 = 10), pkmod = pkmod1cpt, init = 0)
print(my_mod)
# update a subset of parameters and initial values. Add multiplicative error for simulations.
update(my_mod, pars = c(CL = 20), init = 3, sigma_mult = 0.2)
tci_targets
eff_50
# calculate infusion to reach CE50 (concentration for 50% effect) and maintain for 5 minutes
eff_50 <- evd_pkpars[,"CE50"]
eff_50
hist(eff_50)
tci_effect
?predict
# single infusion
single_inf <- create_intvl(times = 0, duration = 0.5, infrt = 100)
multi_inf <- create_intvl(times = c(0,3,6), duration = c(1,0.5,0.5), infrt = 100)
single_inf
?match.arg
#' @param max_pdval Maximum allowable value of PD response.
#' @param min_pdval Minimum allowable value of PD response.
#' @return A list with class pkmod for which print, plot, predict, and simulate methods exist.
#' @rdname init_pkmod
#' @examples
#' # create a pkmod object for a one compartment model
#' init_tcimod(pars = c(CL = 10, V1 = 10), pkmod_fun = pkmod1cpt, init = 0)
#' # create a joint PK-PD model
#' init_tcimod(pars = c(v1 = 8.995, v2 = 17.297, v3 = 120.963, cl = 1.382, q2 = 0.919, q3 = 0.609, ke0 = 1.289), pkmod = pkmod3cptm, pars_pd = c(c50 = 2.8, gamma = 1.47, gamma2 = 1.89, e0 = 93, emx = 93), pdmod = emax, pdinv = inv_emax, ecmpt = 4)
#' @export
init_tcimod <- function(tci_type = c("plasma","effect","combined"), ncmpt = c("one","two","three","three_effect"),
tci_alg = NULL, pkmod = NULL, pars_pk,
init = NULL, pars_pd = NULL, pdmod = NULL,
pdinv = NULL, pcmpt = NULL, ecmpt = NULL, sigma_add = NULL,
sigma_mult = NULL, log_response = NULL, delay = NULL,
pars_pk0 = NULL, pars_pd0 = NULL, omega_pk = NULL, omega_pd = NULL,
omega_sigma = NULL, max_pdval = NULL, min_pdval = NULL){
match.arg(tci_type)
pkmod_obj <- list(tci_type = match.arg(tci_type),
ncmpt = match.arg(ncmpt),
tci_alg = tci_alg,
pkmod = pkmod
init = init,
pars_pd = pars_pd,
pdmod = pdmod,
pdinv = pdinv,
pcmpt = pcmpt,
ecmpt = ecmpt,
sigma_add = sigma_add,
sigma_mult = sigma_mult,
log_response = log_response,
delay = delay,
omega_pk = omega_pk,
omega_pd = omega_pd,
omega_sigma = omega_sigma,
max_pdval = max_pdval,
min_pdval = min_pdval)
class(pkmod_obj) <- "pkmod"
return(pkmod_obj)
}
#' @param max_pdval Maximum allowable value of PD response.
#' @param min_pdval Minimum allowable value of PD response.
#' @return A list with class pkmod for which print, plot, predict, and simulate methods exist.
#' @rdname init_pkmod
#' @examples
#' # create a pkmod object for a one compartment model
#' init_tcimod(pars = c(CL = 10, V1 = 10), pkmod_fun = pkmod1cpt, init = 0)
#' # create a joint PK-PD model
#' init_tcimod(pars = c(v1 = 8.995, v2 = 17.297, v3 = 120.963, cl = 1.382, q2 = 0.919, q3 = 0.609, ke0 = 1.289), pkmod = pkmod3cptm, pars_pd = c(c50 = 2.8, gamma = 1.47, gamma2 = 1.89, e0 = 93, emx = 93), pdmod = emax, pdinv = inv_emax, ecmpt = 4)
#' @export
init_tcimod <- function(tci_type = c("plasma","effect","combined"), ncmpt = c("one","two","three","three_effect"),
tci_alg = NULL, pkmod = NULL, pars_pk,
init = NULL, pars_pd = NULL, pdmod = NULL,
pdinv = NULL, pcmpt = NULL, ecmpt = NULL, sigma_add = NULL,
sigma_mult = NULL, log_response = NULL, delay = NULL,
pars_pk0 = NULL, pars_pd0 = NULL, omega_pk = NULL, omega_pd = NULL,
omega_sigma = NULL, max_pdval = NULL, min_pdval = NULL){
match.arg(tci_type)
pkmod_obj <- list(tci_type = match.arg(tci_type),
ncmpt = match.arg(ncmpt),
tci_alg = tci_alg,
pkmod = pkmod,
init = init,
pars_pd = pars_pd,
pdmod = pdmod,
pdinv = pdinv,
pcmpt = pcmpt,
ecmpt = ecmpt,
sigma_add = sigma_add,
sigma_mult = sigma_mult,
log_response = log_response,
delay = delay,
omega_pk = omega_pk,
omega_pd = omega_pd,
omega_sigma = omega_sigma,
max_pdval = max_pdval,
min_pdval = min_pdval)
class(pkmod_obj) <- "pkmod"
return(pkmod_obj)
}
init_tcimod(pars = c(CL = 10, V1 = 10), pkmod_fun = pkmod1cpt, init = 0)
init_tcimod()
#'  assumed that random effects are log-normally distributed.
#' @param omega_sigma Variance of random effect on additive residual error.
#' @param max_pdval Maximum allowable value of PD response.
#' @param min_pdval Minimum allowable value of PD response.
#' @return A list with class pkmod for which print, plot, predict, and simulate methods exist.
#' @rdname init_pkmod
#' @examples
#' # create a pkmod object for a one compartment model
#' init_tcimod()
#' @export
init_tcimod <- function(tci_type = c("plasma","effect","combined"), ncmpt = c("one","two","three","three_effect"),
tci_alg = NULL, pkmod = NULL, pars_pk,
init = NULL, pars_pd = NULL, pdmod = NULL,
pdinv = NULL, pcmpt = NULL, ecmpt = NULL, sigma_add = NULL,
sigma_mult = NULL, log_response = NULL, delay = NULL,
pars_pk0 = NULL, pars_pd0 = NULL, omega_pk = NULL, omega_pd = NULL,
omega_sigma = NULL, max_pdval = NULL, min_pdval = NULL){
match.arg(tci_type)
pkmod_obj <- list(tci_type = match.arg(tci_type),
ncmpt = match.arg(ncmpt),
tci_alg = tci_alg,
pkmod = pkmod,
init = init,
pars_pd = pars_pd,
pdmod = pdmod,
pdinv = pdinv,
pcmpt = pcmpt,
ecmpt = ecmpt,
sigma_add = sigma_add,
sigma_mult = sigma_mult,
log_response = log_response,
delay = delay,
omega_pk = omega_pk,
omega_pd = omega_pd,
omega_sigma = omega_sigma,
max_pdval = max_pdval,
min_pdval = min_pdval)
class(pkmod_obj) <- "pkmod"
return(pkmod_obj)
}
x <- init_tcimod()
x
x$tci_alg
x$ncmpt
?replace
replace(x$ncmpt, c("one","two","three","three_effect"), c(1,2,3,4))
x$ncmpt
x$ncmpt == c("one","two","three","three_effect")
c(1,2,3,4)[which(x$ncmpt == c("one","two","three","three_effect"))]
x$pkmod
x$ncmpt <- c(1,2,3,4)[which(x$ncmpt == c("one","two","three","three_effect"))]
x$pkmod <- list(pkmod1cpt, pkmod2cpt, pkmod3cpt, pkmod3cptm)[[x$ncmpt]]
x$pkmod
formals(x$pkmod, "init")
names(formals(x$pkmod))
length(eval(formals(x$pkmod)$init))
x$tci_type
x$tci_type
which(x$tci_type == c("plasma","effect","combined"))
list(tci_plasma, tci_effect, tci_comb)[[which(x$tci_type == c("plasma","effect","combined"))]]
formals(x$pkmod
)
all(c("tm","kR","pars","init","inittm") %in% names(formals(x$pkmod)))
!all(c("tm","kR","pars","init","inittm") %in% names(formals(x$pkmod)))
x$tci_alg
x$tci_alg <- list(tci_plasma, tci_effect, tci_comb)[[which(x$tci_type == c("plasma","effect","combined"))]]
x$tci_alg
names(formals(x$tci_alg))
is.vector(x$pars)
tolower(colnames(x$pars))
x$pars_pk
#' validate_pkmod(my_mod2)
#' # Schnider population PK model for propofol
#' dat <- data.frame(AGE  = c(20,40,65),
#'                   TBM  = c(50,70,90),
#'                   HGT  = c(150,170,200),
#'                   MALE = c(TRUE,FALSE,TRUE))
#' my_mod3 <- init_pkmod(pars = schnider_poppk(dat), pkmod_fun = pkmod3cptm)
#' validate_pkmod(my_mod3)
#' @return Returns a list with class "pkmod" if validation checks are passed. Returns an error if not.
#' @export
validate_tcimod <- function(x){
## match PK model
if(is.null(x$pkmod)){
x$ncmpt <- c(1,2,3,4)[which(x$ncmpt == c("one","two","three","three_effect"))]
x$pkmod <- list(pkmod1cpt, pkmod2cpt, pkmod3cpt, pkmod3cptm)[[x$ncmpt]]
} else{
if(!all(c("tm","kR","pars","init","inittm") %in% names(formals(x$pkmod))))
stop('pkmod must contain arguments ("tm","kR","pars","init","inittm").')
x$ncmpt <- length(eval(formals(x$pkmod)$init))
}
## match TCI algorithm if not provided
if(is.null(x$tci_alg)){
x$tci_alg <- list(tci_plasma, tci_effect, tci_comb)[[which(x$tci_type == c("plasma","effect","combined"))]]
} else{
if(!all(c("Ct","pkmod","dtm") %in% names(formals(x$tci_alg))))
stop('pkmod must contain arguments ("Ct","pkmod","dtm").')
}
## verify parameters are named correctly (case indifferent)
if(!is.null(x$pars_pk)){
if(is.vector(x$pars))
parnms <- tolower(names(x$pars))
else
parnms <- tolower(colnames(x$pars))
if(x$ncmpt == 1){
if(any(!(c("k10","v1") %in% parnms)) & any(!(c("cl","v1") %in% parnms)))
stop("pars must have names ('k10','v1') or ('cl','v1')")
}
if(x$ncmpt == 2){
if(any(!(c("k10","k12","k21","v1","v2") %in% parnms)) & any(!(c("cl","q2","v1","v2") %in% parnms)))
stop("pars must have names ('k10','k12','k21','v1','v2') or ('cl','q2','v1','v2')")
}
if(x$ncmpt == 3){
if(any(!(c("k10","k12","k21","k13","k31","v1","v2","v3") %in% parnms)) & any(!(c("cl","q2","q3","v1","v2","v3") %in% parnms)))
stop("pars must have names ('k10','k12','k21','k13','k31','v1','v2','v3') or ('cl','q2','q3','v1','v2','v3')")
}
if(x$ncmpt == 4){
if(any(!(c("k10","k12","k21","k13","k31","ke0","v1","v2","v3") %in% parnms)) &
any(!(c("cl","q2","q3","ke0","v1","v2","v3") %in% parnms)))
stop("pars must have names ('k10','k12','k21','k13','k31','v1','v2','v3','ke0') or ('cl','q2','q3','v1','v2','v3','ke0')")
}
}
## effect-site assignment/warning if PD is specified and ecmpt is not
if(!is.null(x$pdmod) & is.null(x$ecmpt)){
x$ecmpt <- x$ncmpt
}
return(x)
}
init_tcimod
my_mod <- init_tcimod("plasma", "one")
my_mod
validate_pkmod(my_mod)
str(validate_pkmod(my_mod))
my_mod <- init_tcimod(tci_type = "plasma", ncmpt = "one")
my_mod
my_mod$pkmod
my_mod_val <- validate_pkmod(my_mod)
my_mod_val
my_mod_val$tci_alg
my_mod_val <- validate_tcimod(my_mod)
validate_tcimod(my_mod)
my_mod_val$pkmod()
my_mod_val$pkmod
predict_pkmod_Rcpp
