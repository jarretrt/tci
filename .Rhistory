# Chunk 1
# install most recent version from github
# devtools::install_github("jarretrt/tci")
# load packages
library(tci)
library(knitr)
library(gridExtra)
opts_chunk$set(echo = T, message = F, warning = F, fig.align="center")
# Chunk 2
knitr::include_graphics("figures/one_compartment_diagram.pdf")
# Chunk 3
knitr::include_graphics("figures/three_compartment_diagram.pdf")
# Chunk 4
# e.g. infusion rates of 100 mg/hr for 30 min intervals at 0,4 hours
dose <- create_intvl(
as.matrix(cbind(time = c(0.5,4,4.5,10),
infrt = c(100,0,100,0)))
)
dose
# Chunk 5
# predict one compartment model at regular interals
pars_1cpt <- c(ke = 0.1, v = 10)
head(
predict(pkmod1cpt,
inf = dose,
pars = pars_1cpt,
init = 0,
dt = 1/2),
3)
# Chunk 6
# predict for 3cpt model
pars_3cpt <- c(k10=1.5,k12=0.15,k21=0.09,k13=0.8,
k31=0.8,v1=10,v2=15,v3=100,ke0=1)
pkmod3cptm <- assign_pars(pkmod3cptm, pars_3cpt)
predict(pkmod3cptm,
inf = dose,
tms = c(1,2,8))
# Chunk 7
p1cmpt <- plot(pkmod1cpt,
inf = dose,
pars = pars_1cpt,
title = "Plasma concentrations for a 1 compartment model")
p3cmpt <- plot(pkmod3cptm, inf = dose,
title = "Concentrations for a 3 compartment model with an effect site")
grid.arrange(p1cmpt, p3cmpt)
# Chunk 8
# devtools::install_github("ronkeizer/PKPDsim") # install PKPDsim
library(PKPDsim)
# define custom two-compartment model from PKPDsim
pk2 <- new_ode_model(code = "
dAdt[1] = -(CL/V)*A[1] - (Q/V)*A[1] + (Q/V2)*A[2]
dAdt[2] = -(Q/V2)*A[2] + (Q/V)*A[1]
", parameters = c("CL","V","Q","V2")
)
# alternately
pk2 <- new_ode_model(model = "pk_2cmt_iv")
# wrapper function to evaluate pk2 in format used by tci
pkmod2cpt_ode <- function(tm, kR, pars,
pkm = pk2,
init = c(0,0),
inittm = 0,
eps = 1){
# start times at 0 and use uppercase names for PKPDsim functions
tm <- tm - inittm
names(pars) <- toupper(names(pars))
# pass parameters as list
pars <- sapply(pars, as.list)
# dosing regimen
reg <- new_regimen(
amt = kR,
times = 0,
type = "infusion",
t_inf = max(tm) + eps
)
# predict amounts
dat <- sim(
ode = pk2,
parameters = pars,
regimen = reg,
A_init = init,
t_obs = tm
)
# return concentrations with compartments in rows and times in columns
datw <-reshape(dat[dat$comp %in% c(1,2),], idvar = "t",
v.names = "y",
timevar = "comp",
direction = "wide")
vols <- unlist(pars[c("V","V2")])
cons <- t(datw[,c("y.1","y.2")]) / vols
rownames(cons) <- colnames(cons) <- NULL
return(cons)
}
class(pkmod2cpt_ode) <- "pkmod"
# get predicted concentrations
pars_2cpt <- c(CL = 0.2, V = 10, Q = 1.2, V2 = 5)
# plot infusions
plot(pkmod2cpt_ode,
pars = pars_2cpt,
inf = dose,
title = "Plasma concentrations for a user-defined
2-compartment model")
# One compartment model
# find infusion to increase plasma concentration to 2 within 2 minutes.
(inf_est_1cmpt <- tci_plasma(Cpt = 2, dt = 2, pkmod = pkmod1cpt, pars = pars_1cpt))
inf_2min_1cpt <- create_intvl(data.frame(time = c(2, 30),
infrt = c(inf_est_1cmpt,0)))
# three compartment model
inf_est_3cmpt <- tci_plasma(Cpt = 2, dt = 2,
pkmod = pkmod3cptm,
pars = pars_3cpt,
init = c(1,0,0,0))
inf_2min_3cpt <- create_intvl(data.frame(time = c(2, 20),
infrt = c(inf_est_3cmpt,0)))
ptci_1cmpt <- plot(pkmod1cpt,
pars = pars_1cpt,
inf =  inf_2min_1cpt,
title = "10-Second infusion required to reach a
plasma concentration of 2")
ptci_1cmpt <- plot(pkmod1cpt,
pars = pars_1cpt,
inf =  inf_2min_1cpt,
title = "10-Second infusion required to reach a
plasma concentration of 2",
display = FALSE)
plot.tciinf
pkmod3cptm
ptci_1cmpt <- plot(pkmod1cpt,
pars = pars_1cpt,
inf =  inf_2min_1cpt,
title = "10-Second infusion required to reach a
plasma concentration of 2")
ptci_3cmpt <- plot(pkmod3cptm,
pars = pars_3cpt,
inf =  inf_2min_3cpt,
init = c(1,0,0,0),
title = "Infusion required to reach a plasma concentration
of 2 in a 3-compartment model")
grid.arrange(ptci_1cmpt, ptci_3cmpt)
# Calculate the 10 second infusion rate required to reach a concentration
# of 2 ug/ml in the effect-site compartment with existing drug in the first
# compartment.
kR_2ug <- tci_effect(Cet = 2,
pkmod = pkmod3cptm,
pars = pars_3cpt,
init = c(1,0,0,0),
dt = 1/6)
inf_2ug <- create_intvl(data.frame(time = c(1/6, 20),
infrt = c(kR_2ug,0)))
ptci_2ug <- plot(pkmod3cptm,
inf = inf_2ug,
pars = pars_3cpt,
init = c(1,0,0,0),
title = "10-sec infusion to reach a Cet of 2 in a 3cmpt
model with initial concentration")
# maintain and increase target concentrations
tms <- c(0,5,10,10)
ptci_2ug <- plot(pkmod3cptm,
inf = inf_2ug,
pars = pars_3cpt,
init = c(1,0,0,0),
title = "10-sec infusion to reach a Cet of 2 in a 3cmpt
model with initial concentration")
# maintain and increase target concentrations
tms <- c(0,5,10,10)
Cet <- c(2,3,3,3)
# plasma-targeting
inf_3cpt_plasma <- tci(Ct = Cet,
tms = tms,
pkmod = pkmod3cptm,
pars = pars_3cpt,
tci_alg = "plasma")
# infusions for effect-site targeting
inf_3cpt_effect <- tci(Ct = Cet,
tms = tms,
pkmod = pkmod3cptm,
pars = pars_3cpt,
tci_alg = "effect",
cptol = 0.2)
ptci_2ug_plasma <- plot(inf_3cpt_plasma,
title = "Plasma targeting for three-compartment model")
ptci_2ug_plasma <- plot(inf_3cpt_plasma,
title = "Plasma targeting for three-compartment model",
display = FALSE)
ptci_2ug_effect <- plot(inf_3cpt_effect,
title = "Effect-site targeting for three-compartment model",
display = FALSE)
grid.arrange(ptci_2ug, ptci_2ug_plasma, ptci_2ug_effect)
library(tci)
plot.pkmod
# load packages
library(tci)
library(knitr)
library(gridExtra)
# e.g. infusion rates of 100 mg/hr for 30 min intervals at 0,4 hours
dose <- create_intvl(
as.matrix(cbind(time = c(0.5,4,4.5,10),
infrt = c(100,0,100,0)))
)
# predict one compartment model at regular interals
pars_1cpt <- c(ke = 0.1, v = 10)
head(
predict(pkmod1cpt,
inf = dose,
pars = pars_1cpt,
init = 0,
dt = 1/2),
3)
# predict for 3cpt model
pars_3cpt <- c(k10=1.5,k12=0.15,k21=0.09,k13=0.8,
k31=0.8,v1=10,v2=15,v3=100,ke0=1)
pkmod3cptm <- assign_pars(pkmod3cptm, pars_3cpt)
predict(pkmod3cptm,
inf = dose,
tms = c(1,2,8))
p1cmpt <- plot(pkmod1cpt,
inf = dose,
pars = pars_1cpt,
title = "Plasma concentrations for a 1 compartment model")
p1cmpt
p3cmpt <- plot(pkmod3cptm, inf = dose,
title = "Concentrations for a 3 compartment model with an effect site")
plot.pkmod
#' Plot object with class 'pkmod'
#'
#' Will show predicted concentrations in compartments associated with an infusion schedule.
#' @param x An object with class pkmod.
#' @param ... Arguments passed on to predict.pkmod
#' @param inf An infusion schedule object with columns "begin","end","infrt".
#' @param npts Number of points used to evaluate predicted concentrations.
#'
#' @rdname plot
#' @export
plot.pkmod <- function(x, ..., inf, npts = 1000, title = NULL){
browser()
value <- variable <- NULL
# set dt based on range between points
dt <- diff(range(inf[,"begin"], inf[,"end"])) / npts
# predict concentrations
con <- data.frame(predict(x, inf = inf, dt = dt, return_init = TRUE, ...))
ggplot2::ggplot(reshape::melt(con, id = "time"),
ggplot2::aes(x = time,
y = value,
linetype = variable,
color = variable)) +
ggplot2::geom_line() +
ggplot2::labs(y = "Concentration",
x = "Time",
color = "Compartment",
linetype = "Compartment",
title = title) +
ggplot2::scale_color_manual(values = unname(pal))
}
p3cmpt <- plot(pkmod3cptm, inf = dose,
title = "Concentrations for a 3 compartment model with an effect site")
value <- variable <- NULL
# set dt based on range between points
dt <- diff(range(inf[,"begin"], inf[,"end"])) / npts
# predict concentrations
con <- data.frame(predict(x, inf = inf, dt = dt, return_init = TRUE, ...))
con
head(con)
colnames(con)
gsub("^c", "^cmpt", colnames(con))
gsub("^c", "cmpt", colnames(con))
colnames(con) <- gsub("^c", "Cmpt", colnames(con))
ggplot2::ggplot(reshape::melt(con, id = "time"),
ggplot2::aes(x = time,
y = value,
linetype = variable,
color = variable)) +
ggplot2::geom_line() +
ggplot2::labs(y = "Concentration",
x = "Time",
color = "Compartment",
linetype = "Compartment",
title = title) +
ggplot2::scale_color_manual(values = unname(pal))
library(tci)
# load packages
library(tci)
library(knitr)
library(gridExtra)
opts_chunk$set(echo = T, message = F, warning = F, fig.align="center")
# e.g. infusion rates of 100 mg/hr for 30 min intervals at 0,4 hours
dose <- create_intvl(
as.matrix(cbind(time = c(0.5,4,4.5,10),
infrt = c(100,0,100,0)))
)
dose
# predict one compartment model at regular interals
pars_1cpt <- c(ke = 0.1, v = 10)
pkmod1cpt
predict(pkmod1cpt,
inf = dose,
pars = pars_1cpt,
init = 0,
dt = 1/2)
head(
predict(pkmod1cpt,
inf = dose,
pars = pars_1cpt,
init = 0,
dt = 1/2),
3)
# predict for 3cpt model
pars_3cpt <- c(k10=1.5,k12=0.15,k21=0.09,k13=0.8,
k31=0.8,v1=10,v2=15,v3=100,ke0=1)
pkmod3cptm <- assign_pars(pkmod3cptm, pars_3cpt)
predict(pkmod3cptm,
inf = dose,
tms = c(1,2,8))
dose
p1cmpt <- plot(pkmod1cpt,
inf = dose,
pars = pars_1cpt,
title = "Plasma concentrations for a 1 compartment model")
p3cmpt <- plot(pkmod3cptm, inf = dose,
title = "Concentrations for a 3 compartment model with an effect site")
grid.arrange(p1cmpt, p3cmpt)
# devtools::install_github("ronkeizer/PKPDsim") # install PKPDsim
library(PKPDsim)
# devtools::install_github("ronkeizer/PKPDsim") # install PKPDsim
library(PKPDsim)
# define custom two-compartment model from PKPDsim
pk2 <- new_ode_model(code = "
dAdt[1] = -(CL/V)*A[1] - (Q/V)*A[1] + (Q/V2)*A[2]
dAdt[2] = -(Q/V2)*A[2] + (Q/V)*A[1]
", parameters = c("CL","V","Q","V2")
)
# wrapper function to evaluate pk2 in format used by tci
pkmod2cpt_ode <- function(tm, kR, pars,
pkm = pk2,
init = c(0,0),
inittm = 0,
eps = 1){
# start times at 0 and use uppercase names for PKPDsim functions
tm <- tm - inittm
names(pars) <- toupper(names(pars))
# pass parameters as list
pars <- sapply(pars, as.list)
# dosing regimen
reg <- new_regimen(
amt = kR,
times = 0,
type = "infusion",
# t_inf = max(tm) + eps
t_inf = max(tm)
)
vols <- unlist(pars[c("V","V2")])
# predict amounts
dat <- sim(
ode = pk2,
parameters = pars,
regimen = reg,
A_init = init*vols, # init specifies concentrations
t_obs = tm
)
# return concentrations with compartments in rows and times in columns
datw <-reshape(dat[dat$comp %in% c(1,2),], idvar = "t",
v.names = "y",
timevar = "comp",
direction = "wide")
cons <- t(datw[,c("y.1","y.2")]) / vols
rownames(cons) <- colnames(cons) <- NULL
return(cons)
}
class(pkmod2cpt_ode) <- "pkmod"
# get predicted concentrations
pars_2cpt <- c(CL = 15, V = 10, Q = 10, V2 = 20)
# plot infusions
plot(pkmod2cpt_ode,
pars = pars_2cpt,
inf = dose,
title = "Plasma concentrations for a user-defined
2-compartment model")
# One compartment model
# find infusion to increase plasma concentration to 2 within 2 minutes.
(inf_est_1cmpt <- tci_plasma(Cpt = 2, dt = 2, pkmod = pkmod1cpt, pars = pars_1cpt))
inf_2min_1cpt <- create_intvl(data.frame(time = c(2, 30),
infrt = c(inf_est_1cmpt,0)))
inf_2min_1cpt
# three compartment model
inf_est_3cmpt <- tci_plasma(Cpt = 2, dt = 2,
pkmod = pkmod3cptm,
pars = pars_3cpt,
init = c(1,0,0,0))
inf_2min_3cpt <- create_intvl(data.frame(time = c(2, 20),
infrt = c(inf_est_3cmpt,0)))
ptci_1cmpt <- plot(pkmod1cpt,
pars = pars_1cpt,
inf =  inf_2min_1cpt,
title = "10-Second infusion required to reach a
plasma concentration of 2")
ptci_3cmpt <- plot(pkmod3cptm,
pars = pars_3cpt,
inf =  inf_2min_3cpt,
init = c(1,0,0,0),
title = "Infusion required to reach a plasma concentration
of 2 in a 3-compartment model")
grid.arrange(ptci_1cmpt, ptci_3cmpt)
tci_effect
# Calculate the 10 second infusion rate required to reach a concentration
# of 2 ug/ml in the effect-site compartment with existing drug in the first
# compartment.
kR_2ug <- tci_effect(Cet = 2,
pkmod = pkmod3cptm,
pars = pars_3cpt,
init = c(1,0,0,0),
dt = 1/6)
inf_2ug <- create_intvl(data.frame(time = c(1/6, 20),
infrt = c(kR_2ug,0)))
ptci_2ug <- plot(pkmod3cptm,
inf = inf_2ug,
pars = pars_3cpt,
init = c(1,0,0,0),
title = "10-sec infusion to reach a Cet of 2 in a 3cmpt
model with initial concentration")
# maintain and increase target concentrations
tms <- c(0,5,10,10)
Cet <- c(2,3,3,3)
# plasma-targeting
inf_3cpt_plasma <- tci(Ct = Cet,
tms = tms,
pkmod = pkmod3cptm,
pars = pars_3cpt,
tci_alg = "plasma")
# infusions for effect-site targeting
inf_3cpt_effect <- tci(Ct = Cet,
tms = tms,
pkmod = pkmod3cptm,
pars = pars_3cpt,
tci_alg = "effect",
cptol = 0.2)
ptci_2ug_plasma <- plot(inf_3cpt_plasma,
title = "Plasma targeting for three-compartment model",
display = FALSE)
ptci_2ug_effect <- plot(inf_3cpt_effect,
title = "Effect-site targeting for three-compartment model",
display = FALSE)
grid.arrange(ptci_2ug, ptci_2ug_plasma, ptci_2ug_effect)
ptci_2ug
ptci_2ug_plasma
plot(ptci_2ug_plasma)
Cet
inf_3cpt_plasma
View(ptci_2ug_plasma)
View(inf_3cpt_plasma)
ptci_2ug_effect
plot(ptci_2ug_effect)
library('dplyr')
library('ggplot2')
library('magrittr')
source('squash.R')
data('iris')
setwd("~/Dropbox/Documents/Dissertation/paper3")
data('iris')
source('squash.R')
setwd("DataSquashing/")
data('iris')
source('squash.R')
## squash iris data
iris_squash <- squash(iris)
iris
iris_squash
## plot original and squashed data
iris_all <- bind_rows(
"Original"=iris,
"Squashed"=iris_squash,
.id='Dataset')
iris_ggp <- iris_all %>%
ggplot(aes(x=Sepal.Width, y=Sepal.Length, col=Species)) +
facet_wrap(~Dataset) +
geom_point() +
theme(legend.position = 'top')
print(iris_ggp)
## data for prediction
rng <- range(iris$Sepal.Width)
pre <- expand.grid(
Sepal.Width = seq(rng[1], rng[2], length.out=100),
Species = unique(iris$Species))
## fit original data using lm
fit_n <- lm(Sepal.Length ~ Sepal.Width * Species, data=iris)
fit_n %>% summary
pre_n <- predict(fit_n, newdata=pre, interval='confidence', )
pre_n <- cbind(pre, pre_n) %>% mutate(Dataset='Original')
## fit squashed data using lm
## 'df.residual' needs to be corrected for this to work
fit_m <- lm(Sepal.Length ~ Sepal.Width * Species,
data=iris_squash, weights=iris_squash$`(weight)`)
fit_m$df.residual <- with(fit_m, sum(weights)-length(coefficients))
pre_m <- predict(fit_m, newdata=pre, interval='confidence', )
pre_m <- cbind(pre, pre_m) %>% mutate(Dataset='Squashed')
## plot model fits for both data sets
pre <- bind_rows(pre_n, pre_m)
iris_ggp +
geom_line(data=pre, aes(y=fit)) +
geom_ribbon(data=pre, aes(y=fit, ymin=lwr, ymax=upr,
fill=Species), alpha=0.5) +
theme(legend.position = 'top')
iris_squash
devtools::build_vignettes()
install.packages("devtools")
install.packages("devtools")
install.packages("usethis")
devtools::build_vignettes()
library(tci)
vignette(package = "tci")
browseVignettes("tci")
library(tci)
browseVignettes("tci")
help(package = "tci")
devtools::install_github("jarretrt/tci", build_vignettes = TRUE)
