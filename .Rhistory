#' @param Ct Vector of target concentrations
#' @param tms Times at which the TCI algorithm should try to achieve the target concentrations
#' @param tci TCI algorithm. Options are provided for effect-site (default) or plasma targeting.
#' Alternate algorithms can be specified through the 'tci_custom' argument.
#' @param
#'
iterate_tci_grid <- function(Ct, tms, pkmod, pars, init = NULL,
tci = c("effect","plasma"),
dt = 1/6, tci_custom = NULL, ...){
tci <- match.arg(tci)
if(!is.null(tci_custom)){
tci <- tci_custom
} else{
if(tci == "effect") tci <- tci_comb
else tci <- tci_plasma
}
# adjust times such that infusions start at tm = 0 and can be usd by stepfun
inittm <- tms[1]
tms <- tms[-1] - inittm
# create step function to define targets at any point
sf <- stepfun(tms, Ct)
# define sequence of update times
# updatetms <- seq(dt, max(tms)-dt, dt)
updatetms <- seq(dt, max(tms), dt)
ncpt <- length(eval(formals(pkmod)$init))
if(is.null(init)) init <- rep(0,ncpt)
inf <- matrix(NA, nrow = length(updatetms), ncol = 2)
ini <- matrix(NA, nrow = ncpt, ncol = length(updatetms)+1)
ini[,1] <- init
# iterate through times
for(i in 1:length(updatetms)){
inf[i,] <- tci(sf(updatetms[i]), pkmod = pkmod, pars = pars, dt = dt, init = ini[,i], ...)
ini[,i+1] <- pkmod(tm = dt, kR = inf[i,1], pars = pars, init = ini[,i])
}
startcon <- data.frame(matrix(ini[,-ncol(ini)], ncol = nrow(ini), nrow = ncol(ini)-1, byrow = T))
endcon <- data.frame(matrix(ini[,-1], ncol = nrow(ini), nrow = ncol(ini)-1, byrow = T))
out <- create_intvl(dose = data.frame(time = seq(dt, max(tms), dt), infrt = inf[,1]), inittm = inittm)
out <- cbind(out, inf[,2], sf(updatetms), startcon, endcon)
names(out) <- c("intvl","infrt","begin","end","dt","Ct",paste0("c",1:ncpt, "_start"), paste0("c",1:ncpt, "_end"))
class(out) <- c("tciinf",class(out))
return(out)
}
# apply tci algorithm to sigmoid targets
sig_tci_targets <- tci_pd(pdresp = targets_sigmoid,
tms = tms_sigmoid,
pdinv = inv_emax,
pdmod = emax,
pkmod = pkmod3cptm,
pars_pk = pars_3cpt,
pars_pd = pars_emax)
sig_tci_targets
plot(sig_tci_targets)
head(sig_tci_targets)
tms_sigmoid <- seq(0,10,1/60) # 10 minute induction with target sigmoid
targets_sigmoid <- emax(tms_sigmoid, restrict_sigmoid(1)) # parameters restricted to reach mid point at t=1 minute
targets_sigmoid
# parameters of Emax model
pars_emax <- c(c50 = 1.5, gamma = 4, E0 = 100, Emx = 100)
# apply tci algorithm to sigmoid targets
sig_tci_targets <- tci_pd(pdresp = targets_sigmoid,
tms = tms_sigmoid,
pdinv = inv_emax,
pdmod = emax,
pkmod = pkmod3cptm,
pars_pk = pars_3cpt,
pars_pd = pars_emax)
plot(sig_tci_targets)
#' Plotting method for tciinf objects. Will work for outputs from "iterate_tci_grid" or "tci_pd".
plot.tciinf <- function(tciinf, title = NULL){
# data frame for PK plot
tciinfm <- melt(tciinf[,c("infrt","dt","begin","Ct",grep("\\_start",names(tciinf), value = T))], id.vars = c("infrt","dt","begin","Ct"))
tciinfm$variable <- gsub("\\_start|c", "", tciinfm$variable)
names(tciinfm)[names(tciinfm) == "variable"] <- "Compartment"
ppk <- ggplot(tciinf[,c("begin","Ct")], aes(x = begin, y = Ct, fill = "")) +
geom_line(data = tciinf[,c("begin","Ct")], color = "black", size = 1, linetype = "dashed") +
guides(fill=guide_legend(title="Target"))  +
geom_line(data = tciinfm, mapping = aes(x = begin, y = value, color = Compartment), show.legend = TRUE) +
ylim(range(tciinfm$value)) +
labs(x = "Time", y = "Concentration") +
theme(legend.position="bottom")
if("pdresp" %in% names(tciinf)){
ppd <- ggplot(tciinf, aes(x = begin, y = pdt)) +
geom_line(data = tciinf, color = "black", size = 1, linetype = "dashed") +
# guides(fill=guide_legend(title="Target effect", linetype = "dashed"))  +
geom_line(data = tciinf,
mapping = aes(x = begin, y = pdresp), show.legend = TRUE) +
ylim(c(0,100)) +
labs(x = "Time", y = "PD response") +
theme(legend.position="bottom")
}
if("pdresp" %in% names(tciinf)){
grid.arrange(ppd, ppk, nrow = 2, top = title)
} else{
grid.arrange(ppk, top = title)
}
}
.S3method("plot","tciinf",plot.tciinf)
plot(sig_tci_targets)
#' Plotting method for tciinf objects. Will work for outputs from "iterate_tci_grid" or "tci_pd".
plot.tciinf <- function(tciinf, title = NULL){
# data frame for PK plot
tciinfm <- melt(tciinf[,c("infrt","dt","begin","Ct",grep("\\_start",names(tciinf), value = T))], id.vars = c("infrt","dt","begin","Ct"))
tciinfm$variable <- gsub("\\_start|c", "", tciinfm$variable)
names(tciinfm)[names(tciinfm) == "variable"] <- "Compartment"
ppk <- ggplot(tciinf[,c("begin","Ct")], aes(x = begin, y = Ct, fill = "")) +
geom_line(data = tciinf[,c("begin","Ct")], color = "black", size = 0.8, linetype = "dashed") +
guides(fill=guide_legend(title="Target"), linetype = "dashed")  +
geom_line(data = tciinfm, mapping = aes(x = begin, y = value, color = Compartment), size = 1.2, show.legend = TRUE) +
ylim(range(tciinfm$value)) +
labs(x = "Time", y = "Concentration") +
theme(legend.position="bottom")
if("pdresp" %in% names(tciinf)){
ppd <- ggplot(tciinf, aes(x = begin, y = pdt)) +
geom_line(data = tciinf, color = "black", size = 0.8, linetype = "dashed") +
# guides(fill=guide_legend(title="Target effect", linetype = "dashed"))  +
geom_line(data = tciinf,
mapping = aes(x = begin, y = pdresp), size = 1.2, show.legend = TRUE) +
ylim(c(0,100)) +
labs(x = "Time", y = "PD response") +
theme(legend.position="bottom")
}
if("pdresp" %in% names(tciinf)){
grid.arrange(ppd, ppk, nrow = 2, top = title)
} else{
grid.arrange(ppk, top = title)
}
}
.S3method("plot","tciinf",plot.tciinf)
plot(sig_tci_targets)
#' Plotting method for tciinf objects. Will work for outputs from "iterate_tci_grid" or "tci_pd".
plot.tciinf <- function(tciinf, title = NULL){
# data frame for PK plot
tciinfm <- melt(tciinf[,c("infrt","dt","begin","Ct",grep("\\_start",names(tciinf), value = T))], id.vars = c("infrt","dt","begin","Ct"))
tciinfm$variable <- gsub("\\_start|c", "", tciinfm$variable)
names(tciinfm)[names(tciinfm) == "variable"] <- "Compartment"
ppk <- ggplot(tciinf[,c("begin","Ct")], aes(x = begin, y = Ct, fill = "")) +
geom_line(data = tciinf[,c("begin","Ct")], color = "black", size = 0.8, linetype = "dashed") +
guides(fill=guide_legend(title="Target"), linetype = "dashed")  +
geom_line(data = tciinfm, mapping = aes(x = begin, y = value, color = Compartment), size = 1, show.legend = TRUE) +
ylim(range(tciinfm$value)) +
labs(x = "Time", y = "Concentration") +
theme(legend.position="bottom")
if("pdresp" %in% names(tciinf)){
ppd <- ggplot(tciinf, aes(x = begin, y = pdt)) +
geom_line(data = tciinf, color = "black", size = 0.8, linetype = "dashed") +
# guides(fill=guide_legend(title="Target effect", linetype = "dashed"))  +
geom_line(data = tciinf,
mapping = aes(x = begin, y = pdresp), size = 1, show.legend = TRUE) +
ylim(c(0,100)) +
labs(x = "Time", y = "PD response") +
theme(legend.position="bottom")
}
if("pdresp" %in% names(tciinf)){
grid.arrange(ppd, ppk, nrow = 2, top = title)
} else{
grid.arrange(ppk, top = title)
}
}
.S3method("plot","tciinf",plot.tciinf)
plot(sig_tci_targets)
#' Function to place restriction on gamma and E50 parameters of target sigmoid
#' such that it passes through point (tfinal, BISfinal+eps)
restrict_sigmoid <- function(t50, tfinal =10, eps = 1, BIS0 = 100, BISfinal = 50){
gamma <- log((BIS0-BISfinal)/eps - 1, base = tfinal/t50)
c(c50 = t50, gamma = gamma, E0 = BIS0, Emx = BIS0 - BISfinal)
}
elveld_pop <- eleveld_poppk(eleveld_pk, rate = T, PD = T)
elveld_pop
head(elveld_pop)
pars_3cpt
eleveld_poppk <- function(df, PD = TRUE, rate = FALSE, rand = FALSE){
# fixed effect estimates
theta <- c(6.28,25.5,273,1.79,1.75,1.11,0.191,42.3,9.06,-0.0156,-0.00286,33.6,-0.0138,68.3,2.10,1.30,1.42,0.68)
# random effect variances
omega <- c(0.610,0.565,0.597,0.265,0.346,0.209,0.463)
# simulate random effects if rand = TRUE
if(rand){
eta <- mvtnorm::rmvnorm(n=nrow(df), mean = rep(0,length(omega)), sigma=diag(omega))
} else{
eta <- matrix(0, nrow = nrow(df), ncol = length(omega))
}
AGE  <- df$AGE
PMA  <- df$PMA
WGT  <- df$WGT
HGT  <- df$HGT
M1F2 <- df$M1F2
TECH <- df$TECH
A1V2 <- df$A1V2
MALE <- ifelse(M1F2 == 1, 1, 0)
OPIATE <- ifelse(TECH == 2, 1, 0)
ARTERIAL <- ifelse(A1V2 == 1, 1, 0)
AGEref=35
WGTref=70
HGTref=170
df$PMA[is.na(PMA)] <- AGE[is.na(PMA)] + 40/52
PMAref = AGEref + 40/52
BMI = 10000 * WGT / HGT / HGT
BMIref = 10000 * WGTref / HGTref / HGTref
V1ref = theta[1]
V2ref = theta[2]
V3ref = theta[3]
faging <- function(x) exp(x*(AGE-AGEref))
fsigmoid <- function(x,E50,lambda) x^lambda / (x^lambda + E50^lambda)
fcentral <- function(x) fsigmoid(x,theta[12],1)
fCLmaturation <- fsigmoid(PMA*52,theta[8],theta[9])
fCLmaturation_ref = fsigmoid(PMAref*52,theta[8],theta[9])
fQ3maturation <- fsigmoid(AGE*52+40,theta[14],1)
fQ3maturation_ref <- fsigmoid(AGEref*52+40,theta[14],1)
fopiates <- function(x) ifelse(OPIATE,exp(x*AGE),1)
fAlSallami <- ifelse(MALE, (0.88+(1-0.88)/(1+(AGE/13.4)^(-12.7)))*(9270*WGT)/(6680+216*BMI),
(1.11+(1-1.11)/(1+(AGE/7.1)^(-1.1)))*(9270*WGT)/(8780+244*BMI))
fAlSallami_ref <- (0.88+(1-0.88)/(1+(AGEref/13.4)^(-12.7))) *(9270*WGTref)/(6680+216*BMIref)
V1arterial <- theta[1]*fcentral(WGT)/fcentral(WGTref)*exp(eta[,1])
V1venous <- V1arterial*(1+theta[17]*(1-fcentral(WGT)))
V2 <- theta[2]*WGT/WGTref*faging(theta[10])*exp(eta[,2])
V3 <- theta[3]*(fAlSallami/fAlSallami_ref)*fopiates(theta[13])*exp(eta[,3])
CL <- (MALE*theta[4] + (1-MALE)*theta[15])*(WGT/WGTref)^0.75*(fCLmaturation/fCLmaturation_ref)*fopiates(theta[11])*exp(eta[,4])
Q2arterial <- theta[5]*(V2/V2ref)^(0.75)*(1+theta[16]*(1-fQ3maturation))*exp(eta[,5])
Q2venous <- Q2arterial*theta[18]
Q3 <- theta[6]*(V3/V3ref)^(0.75)*(fQ3maturation/fQ3maturation_ref)*exp(eta[,6])
V1 = ifelse(ARTERIAL, V1arterial, V1venous)
K10 = CL/V1
K12 = ifelse(ARTERIAL, Q2arterial/V1, Q2venous/V1)
K21 = ifelse(ARTERIAL, Q2arterial/V2, Q2venous/V2)
K13 = Q3/V1
K31 = Q3/V3
if(rate){
df$K10 <- K10
df$K12 <- K12
df$K21 <- K21
df$K13 <- K13
df$K31 <- K31
df$V1  <- V1
df$V2  <- V2
df$V3  <- V3
} else{
df$CL <- CL
df$Q2 <- ifelse(ARTERIAL, Q2arterial, Q2venous)
df$Q3 <- Q3
df$V1  <- V1
df$V2  <- V2
df$V3  <- V3
}
if(!PD) df$LN_SIGMA <- theta[7]*exp(eta[,7])
if(PD){
theta_pd <- c(3.08,0.146,93.0,1.47,8.03,0.0517,-0.00635,1.24,1.89)
omega_pd <- c(0.242,0.702,0.230)
if(rand){
eta_pd <- mvtnorm::rmvnorm(n=nrow(df), mean = rep(0,length(omega_pd)), sigma=diag(omega_pd))
} else{
eta_pd <- matrix(0, nrow = nrow(df), ncol = length(omega_pd))
}
df$CE50 = theta_pd[1]*faging(theta_pd[7])*exp(eta_pd[,1])
df$KE0 = ifelse(ARTERIAL, theta_pd[2]*(WGT/70)^(-0.25)*exp(eta[2]), theta_pd[8]*(WGT/70)^(-0.25)*exp(eta_pd[,2]))
df$BIS0 = theta_pd[3]
df$GAMMA = theta_pd[4] # value of gamma when Ce < Ce50
df$GAMMA2 = theta_pd[9]
df$SIGMA = theta_pd[5]*exp(eta_pd[,3])
df$BIS_DELAY = 15 + exp(theta_pd[6]*AGE)
}
return(df)
}
debugonce(eleveld_poppk)
elveld_pop <- eleveld_poppk(eleveld_pk, rate = T, PD = T)
rate
head(df)
debugonce(eleveld_poppk)
elveld_pop <- eleveld_poppk(eleveld_pk, rate = T, PD = T)
head(df)
df$V1
head(df$V1)
head(V1)
install.packages("prodlim")
# Figure 1 - observed PK-PD data
pkobs <- read.table(file = "~/Dissertation Extra/data/EleveldEtAl/EleveldPK.txt", header = T, sep = "")
pkobs$eDV <- exp(pkobs$DV)
library(ggplot2)
ggplot(pkobs[pkobs$DVTY != 0,], aes(x = TIME, y = eDV)) +
geom_line(aes(group = ID), alpha = 0.3) +
scale_y_log10(breaks = c(0.005,0.05,0.5,5,50)) +
geom_smooth()
pdobs <- read.table(file = "~/Dissertation Extra/data/EleveldEtAl/EleveldPD.txt", header = T, sep = "")
ggplot(pdobs[pdobs$DVTY == 4,], aes(x = TIME, y = DV)) +
geom_line(aes(group = ID), alpha = 0.3) +
geom_smooth()
eleveld_poppk
eleveld_pk
head(eleveld_pk)
# calculate predicted dose to reach 50% effect based on EB estimates and prior parameters (shown in paper)
load(file = "~/tci/data/eleveld_pk.RData")
eleveld_pk$k10 = eleveld_pk$CL / eleveld_pk$V1
eleveld_pk$k12 = eleveld_pk$Q2 / eleveld_pk$V1
eleveld_pk$k21 = eleveld_pk$Q2 / eleveld_pk$V2
eleveld_pk$k13 = eleveld_pk$Q3 / eleveld_pk$V1
eleveld_pk$k31 = eleveld_pk$Q3 / eleveld_pk$V3
eleveld_pk$k31
pkpd <- merge(eleveld_pk, eleveld_pd, by = intersect(names(eleveld_pk), names(eleveld_pd)))
head(eleveld_pk)
head(eleveld_pd)
load(file = "~/tci/data/eleveld_pd.RData")
head(eleveld_pd)
intersect(names(eleveld_pk), names(eleveld_pd))
pkpd <- merge(eleveld_pk, eleveld_pd, by = intersect(names(eleveld_pk), names(eleveld_pd)))
head(pk_prior)
prior_all <- merge(eleveld_pk, eleveld_pd, by = intersect(names(eleveld_pk), names(eleveld_pd)))
head(prior_all)
TCI_basic
TCI_basic <- function(Ce, pars, init, tmax_search = 20, grid_space = 1/60, return_jpeak = F, kRmax = 10000){
# course without infusion - use current concentration
B <- pk_solution_3cpt_metab_singleinf(pars = pars, ivt = list(begin = 0, end = 1/6, k_R = 0), init = init, ce_only = T)
# course with infusion starting from 0 concentration
E <- pk_solution_3cpt_metab_singleinf(pars = pars, ivt = list(begin = 0, end = 1/6, k_R = 1), init = c(0,0,0,0), ce_only = T)
# find tpeak
tm_seq <- seq(grid_space,tmax_search,grid_space)
ceproj <- E(tm_seq)
tpeak = tm_seq[which.max(ceproj)]
if(all(init == 0)){
kR <- unname((Ce-B(tpeak)) / E(tpeak))
if(kR > kRmax) kR = kRmax
if(return_jpeak) return(c(kR = kR, jpeak = tpeak, Ce = E(tpeak)))
else return(kR)
} else{
tm_seq2 <- seq(grid_space,tpeak+0.5,grid_space)
jpeak0 = tpeak - 0.1# initialize search
jpeak1 = jpeak0 + 0.1
while(jpeak0 != jpeak1){
jpeak0 = jpeak1
I0 = (Ce - B(jpeak0)) / E(jpeak0)
ceproj = B(tm_seq2) + E(tm_seq2)*I0
jpeak1 = tm_seq2[which.max(ceproj)]
}
kR = unname((Ce-B(jpeak1)) / E(jpeak1))
if(kR < 0) kR = 0
if(kR > kRmax) kR = kRmax
if(return_jpeak) return(c(kR = kR, jpeak = jpeak1, Ce = B(jpeak1) + E(jpeak1)*I0))
else return(kR)
}
}
TCI_basic
names(pkpd_prior)
names(prior_all)
TCI_basic
setwd("~/Dropbox/Documents/Dissertation/paper1/Robust Closed-Loop Induction of General Anesthesia with Propofol/R files/")
# Simulation set up
source("./functions.R", local = T)
library(mvtnorm)
# PK values published in Eleveld et al.
eleveld_theta_pk_est <- c(6.28,25.5,273,1.79,1.75,1.11,0.191,42.3,9.06,-0.0156,-0.00286,33.6,-0.0138,68.3,2.10,1.30,1.42,0.68)
eleveld_theta_pk_ub99 <- c(6.8,27.6,306,1.87,1.85,1.20,0.200,45.1,12.29,-0.0128,-0.00186,50.0,-0.0107,86.0,2.21,2.13,1.78,0.78)
eleveld_theta_pk_lb99 <- c(5.97,23.5,243,1.71,1.61,1.02,0.183,40.5,5.95,-0.0185,-0.00388,22.8,-0.0171,52.4,2.00,0.70,0.92,0.62)
eleveld_eta_pk_var <- c(0.610,0.565,0.597,0.265,0.346,0.209,0.463)
# PD values published in Eleveld et al.
eleveld_theta_pd_est <- c(3.08,0.146,93.0,1.47,8.03,0.0517,-0.00635,1.24,1.89)
eleveld_theta_pd_ub99 <-c(3.26,0.177,93.7,1.51,8.49,0.0534,-0.00353,1.80,1.96)
eleveld_theta_pd_lb99 <- c(2.91,0.121,92.3,1.44,7.59,0.0499,-0.00917,0.87,1.83)
eleveld_eta_pd_var <- c(0.242,0.702,0.230) # values published in paper
# # Generate 3 patients at different fixed effect values - age is the primary variable of importance, since it determines the delay in BIS
# patient1 <- list(AGE=11,WGT=54,HGT=152,MALE=T,PMA=NA,OPIATE=F,ARTERIAL=T,
#                  theta_pk= eleveld_theta_pk_est,
#                  eta_pk=c(rmvnorm(1,rep(0,length(eleveld_eta_pk_var)),diag(eleveld_eta_pk_var))),
#                  theta_pd= eleveld_theta_pd_est,
#                  eta_pd=c(rmvnorm(1,rep(0,length(eleveld_eta_pd_var)),diag(eleveld_eta_pd_var))),
#                  ID=424)
# patient2 <- list(AGE=43,WGT=51,HGT=156,MALE=F,PMA=NA,OPIATE=F,ARTERIAL=T,
#                  theta_pk=eleveld_theta_pk_est,
#                  eta_pk=c(rmvnorm(1,rep(0,length(eleveld_eta_pk_var)),diag(eleveld_eta_pk_var))),
#                  theta_pd=eleveld_theta_pd_est,
#                  eta_pd=c(rmvnorm(1,rep(0,length(eleveld_eta_pd_var)),diag(eleveld_eta_pd_var))),
#                  ID=758)
# patient3 <- list(AGE=63,WGT=82,HGT=180,MALE=T,PMA=NA,OPIATE=F,ARTERIAL=T,
#                  theta_pk=eleveld_theta_pk_est,
#                  eta_pk=c(rmvnorm(1,rep(0,length(eleveld_eta_pk_var)),diag(eleveld_eta_pk_var))),
#                  theta_pd=eleveld_theta_pd_est,
#                  eta_pd=c(rmvnorm(1,rep(0,length(eleveld_eta_pd_var)),diag(eleveld_eta_pd_var))),
#                  ID=702)
# patients <- list(patient1, patient2, patient3)
#
# patient_pkpd <- sapply(patients, function(x) {
#   c(gen_eleveld_pk_pars(theta = x$theta_pk, eta = x$eta_pk, AGE = x$AGE, PMA = x$PMA,WGT = x$WGT, HGT = x$HGT, MALE = x$MALE, OPIATE = x$OPIATE, ARTERIAL = x$ARTERIAL),
#     gen_eleveld_pd_pars(theta = x$theta_pd, eta = x$eta_pd, AGE = x$AGE, WGT = x$WGT, ARTERIAL = x$ARTERIAL))
# })
#
# # create prior distribution for each patient
# sample_lpars <- function(patient_vals, returnQ = F){
#   patient_vals$theta_pk=eleveld_theta_pk_est
#   patient_vals$eta_pk=c(rmvnorm(1,rep(0,length(eleveld_eta_pk_var)),diag(eleveld_eta_pk_var)))
#   patient_vals$theta_pd=eleveld_theta_pd_est
#   patient_vals$eta_pd=c(rmvnorm(1,rep(0,length(eleveld_eta_pd_var)),diag(eleveld_eta_pd_var)))
#   return(log(c(gen_eleveld_pk_pars(theta = patient_vals$theta_pk, eta = patient_vals$eta_pk, AGE = patient_vals$AGE, PMA = patient_vals$PMA,WGT = patient_vals$WGT, HGT = patient_vals$HGT, MALE = patient_vals$MALE, OPIATE = patient_vals$OPIATE, ARTERIAL = patient_vals$ARTERIAL, returnQ = returnQ),
#                gen_eleveld_pd_pars(theta = patient_vals$theta_pd, eta = patient_vals$eta_pd, AGE = patient_vals$AGE, WGT = patient_vals$WGT, ARTERIAL = patient_vals$ARTERIAL))))
# }
#
# fixed_vars <- c(11,12,13,15) # these parameters do not vary between patients beyond fixed effects
# lhyperlist <- lapply(patients, function(x){
#   mu = log(c(gen_eleveld_pk_pars(theta = eleveld_theta_pk_est, eta = eleveld_eta_pk_var, AGE = x$AGE, PMA = x$PMA,WGT = x$WGT, HGT = x$HGT, MALE = x$MALE, OPIATE = x$OPIATE, ARTERIAL = x$ARTERIAL),
#              gen_eleveld_pd_pars(theta = eleveld_theta_pd_est, eta = eleveld_eta_pd_var, AGE = x$AGE, WGT = x$WGT, ARTERIAL = x$ARTERIAL)))
#   mu_fixed = mu[fixed_vars]
#   mu = mu[-fixed_vars]
#   sig = cov(t(replicate(1e3, sample_lpars(x[1:7]))))[-fixed_vars,-fixed_vars]
#   list(mu=mu, mu_fixed = mu_fixed, sig=sig)
# })
#
# # some of the parameters are highly colinear -- add epsilon to the diagonal elements so that the vcov matrices can be inverted
# lhyperlist <- lapply(lhyperlist, function(x) {
#   x$sig <- x$sig + diag(diag(x$sig)*1e-5)
#   return(x)
# })
#
#
# # generate latin hypercube samples for each patient
# set.seed(2)
# npars = 11
# nvariations = npars*2
# nsd = 2
# lhs_pars <- lapply(1:length(lhyperlist), function(id){
#   lpars_fixed = lhyperlist[[id]]$mu_fixed
#   lhs_01 <- lhs::randomLHS(nvariations, npars)
#   lhs_sd <- (lhs_01*2-1)*nsd
#   patient_pars <- apply(lhs_sd, 1, function(x) x * sqrt(diag(lhyperlist[[id]]$sig)) + lhyperlist[[id]]$mu)
#   colnames(patient_pars) <- paste("Variation", 1:nvariations)
#   return(patient_pars)
# })
# load empirical Bayes estimates
pd <- read.table(file = "../data/final_pd_model.posthoc.txt", header = T, sep = "", skip = 1)
pk <- read.table(file = "../data/final_pk_model.posthoc.txt", header = T, sep = "", skip = 1)
pk$k10 = pk$CL / pk$V1
pk$k12 = pk$Q2 / pk$V1
pk$k21 = pk$Q2 / pk$V2
pk$k13 = pk$Q3 / pk$V1
pk$k31 = pk$Q3 / pk$V3
pkpd <- merge(pk,pd,by = intersect(names(pk), names(pd)))
eb <- pkpd[,c("k10","k12","k21","k13","k31","V1","V2","V3","KE0","E50","RESD")]
eb_fixed <- cbind(pkpd[,c("GAM","GAM1","EMAX")],pkpd$ALAG1*60)
names(eb) <- c("k10","k12","k21","k13","k31","v1","v2","v3","ke0","Ce50","err")
fixed_vars <- c(11,12,13,15) # these parameters do not vary between patients beyond fixed effects
names(eb_fixed) <- c("gamma","gamma2","E0","bis_delay")
eb_all <- as.matrix(cbind(eb, eb_fixed))
# prior distribution for patients based on covariate values - NOT EB parameter estimates
# Note: TECH = 2 --> presence of opioids
# pk_prior <- sapply(1:nrow(pkpd), function(i){
#   gen_eleveld_pk_pars(theta = eleveld_theta_pk_est, eta = eleveld_eta_pk_var, patient_vars = pkpd[i,], returnQ = F)
# })
#
# pd_prior <- sapply(1:nrow(pkpd), function(i){
#   gen_eleveld_pd_pars(theta = eleveld_theta_pd_est, eta = eleveld_eta_pd_var, patient_vars = pkpd[i,])
# })
pk_prior <- sapply(1:nrow(pkpd), function(i){
gen_eleveld_pk_pars(theta = eleveld_theta_pk_est, eta = rep(0, length(eleveld_eta_pk_var)), patient_vars = pkpd[i,], returnQ = F)
})
pd_prior <- sapply(1:nrow(pkpd), function(i){
gen_eleveld_pd_pars(theta = eleveld_theta_pd_est, eta = rep(0, length(eleveld_eta_pd_var)), patient_vars = pkpd[i,])
})
lvars <- c(eleveld_eta_pk_var, eleveld_eta_pd_var)
names(lvars) <- c("V1","V2","V3","CL","Q2","Q3","RESID_PK","Ce50","ke0","RESID_PD")
lvars <- c(lvars, c(k10 = unname(lvars["CL"] + lvars["V1"]),
k12 = unname(lvars["Q2"] + lvars["V1"]),
k21 = unname(lvars["Q2"] + lvars["V2"]),
k13 = unname(lvars["Q3"] + lvars["V1"]),
k31 = unname(lvars["Q3"] + lvars["V3"])))
lhyper0 <- diag(lvars[c("k10","k12","k21","k13","k31","V1","V2","V3","ke0","Ce50","RESID_PD")])
# compare vcov from EB estimates to prior
cbind(lvars[c("k10","k12","k21","k13","k31","V1","V2","V3","ke0","Ce50","RESID_PD")], round(diag(cov(log(eb))),3))
# create EB covariance matrix
covEB <- cov(log(eb))
covEB <- covEB + diag(diag(covEB)*1e-5)
# pk2 <- read.table(file = "../data/EleveldNONMEM_PK.ext", header = T, sep = "", skip = 1)
# test how many EB parameters fall within 95% bounds of the prior
inbounds <- matrix(NA, nrow = nrow(pkpd), ncol = 11)
for(i in 1:nrow(pkpd)){
pars0i <- list(pk = unlist(eb[i,1:9]),
pd = eb[i,10],
sigma = eb[i,11],
gamma = eb_fixed[i,"gamma"],
gamma2 = eb_fixed[i,"gamma2"],
E0 = eb_fixed[i,"E0"],
lag = eb_fixed[i,"bis_delay"])
# prior parameters
mu <- log(c(pk_prior[,i], pd_prior[,i]))[-fixed_vars]
lb <- mu + qnorm(p = 0.025)*sqrt(diag(lhyper0))
ub <- mu + qnorm(p = 0.975)*sqrt(diag(lhyper0))
lpars_i <- log(c(pars0i$pk, pars0i$pd, pars0i$sigma))
inbounds[i,] <-  lpars_i<ub & lpars_i>lb
}
inbounds_counts <- apply(inbounds, 2, sum)
names(inbounds_counts) <- names(mu)
# generate random samples for patient 1
set.seed(1)
nsamples = 20
mu_rand <- log(c(pk_prior[,1], pd_prior[,1]))
rand_samples <- exp(rmvnorm(nsamples, mu_rand[-fixed_vars], lhyper0))
eb
eb_all <- cbind(eb, eb_fixed)
prior_all <- t(rbind(pk_prior, pd_prior))
eb_dose <- rep(NA, nrow(eb))
prior_dose <- rep(NA, nrow(eb))
nrow(prior_all)
eb_all[1,1:9]
names(prior_all)
prior_all <- merge(eleveld_pk, eleveld_pd, by = intersect(names(eleveld_pk), names(eleveld_pd)))
names(prior_all)
for(i in 1:nrow(eb)){
eb_dose[i] <- TCI_basic(Ce = eb_all[i,"Ce50"], pars = unlist(eb_all[i,1:9]), init = c(0,0,0,0)) / 6 / pkpd$WGT[i]
prior_dose[i] <- TCI_basic(Ce = prior_all[i,"E50"],
pars = unlist(prior_all[i,c("k10","k12","k21","k13","k31","V1","V2","V3","KE0")]),
init = c(0,0,0,0)) / 6 / pkpd$WGT[i]
}
plot(prior_dose, eb_dose, xlim = c(0,4), ylim = c(0,4)); abline(a = 0, b =1)
eb_all[1:5,]
prior_all[1:5,]
# Note: the parameter estimates in the Eleveld dataset are the EB estimates rather than the prior estimates
elveld_pop <- eleveld_poppk(eleveld_pk, rate = T, PD = T)
elveld_pop
