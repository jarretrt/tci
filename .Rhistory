if(plot_progress[i]){
print(plot(dat0, lpars_update = post_est$par,
lpars_fixed = log(prior$pars_pkpd[prior$fixed_ix])))
}
# update prior values
if(any(!is.null(prior$fixed_ix))){
prior$pars_pkpd[-prior$fixed_ix] <- exp(head(post_est$par,-1))
prior$err <- exp(tail(post_est$par,1))
} else{
prior$pars_pkpd <- exp(head(post_est$par,-1))
prior$err <- exp(tail(post_est$par,1))
}
# update true and predicted initial values
init0 <- dat0$sim[nrow(dat0$sim),grep("c[0-9]",colnames(dat0$sim))]
init_p <- as.numeric(predict(pkmod,
inf = dat0$inf,
tms = update_tms[i],
pars = prior$pars_pkpd[prior$pk_ix],
init = init_start)[-1])
}
# save final posterior parameter values
if(any(!is.null(prior$fixed_ix))){
lpr <- log(c(prior$pars_pkpd[-prior$fixed_ix], err = prior$err))
lpr_fixed <- log(prior$pars_pkpd[prior$fixed_ix])
} else{
lpr <- log(c(prior$pars_pkpd, err = prior$err))
lpk_fixed <- NULL
}
lpr_all <- rbind(lpr_all, lpr)
out <- list(dat = dat0,
lpr = lpr_all,
posterior = prior,
prior = prior0,
true_pars = true_pars)
class(out) <- "bayessim"
return(out)
}
debug(bayes_control)
bayes_sim <- bayes_control(targets = targets,
updates = update_times,
prior = prior_pars,
true_pars = true_pars)
targets_sub
obs_tms_sub
tci_pd(pdresp  = targets_sub$target,
tms     = targets_sub$time,
pdinv   = pdinv,
pdmod   = pdmod,
pkmod   = pkmod,
pars_pk = prior_pk,
pars_pd = prior_pd,
init = init_p,
tci_alg = tci_alg)
inf
dat
dat$sim
targets_sub
obs_tms_sub
inf
plot(dat0)
plot(dat0)
undebug(bayes_control)
bayes_sim <- bayes_control(targets = targets,
updates = update_times,
prior = prior_pars,
true_pars = true_pars)
debug(log_likelihood)
bayes_sim <- bayes_control(targets = targets,
updates = update_times,
prior = prior_pars,
true_pars = true_pars)
pk_ix
pk_ix
undebug(log_likelihood)
prior_pars <- list(pars_pkpd = theta[1:12], sig = cov(t(log(theta_samples))),
pk_ix = 1:7, pd_ix = 8:12, fixed_ix = 9:12,
err = theta["sigma"], delay = theta["bis_delay"]/60)
true_pars <- list(pars_pkpd = theta0[1:12], pk_ix = 1:7, pd_ix = 8:12,
fixed_ix = 9:12, err = theta0["sigma"],
delay = theta0["bis_delay"]/60)
bayes_sim <- bayes_control(targets = targets,
updates = update_times,
prior = prior_pars,
true_pars = true_pars)
pk_ix
lpr
dat
pd_ix
lpr
log_posterior_neg
log_likelihood
#' @param init_p Predicted initial concentrations
#' @param obs_tms Times at which observations are collected. If null, observations will be
#' made at fixed intervals specified by 'dtm'.
#' @param dt_obs Interval between measurements.
#' @param sim_starttm Start time of simulation
#' @param tci_alg TCI algorithm used. Defaults to effect-site targeting.
#' @param print_progress Logical. Should current update times be printed to the console.
#'
#' @importFrom utils head tail
#' @export
bayes_control <- function(targets, updates, prior, true_pars,
pkmod = pkmod3cptm, pdmod = emax_eleveld,
pdinv = inv_emax_eleveld,
init0 = NULL, init_p = NULL, obs_tms = NULL,
dt_obs = 1/6, sim_starttm = 0, tci_alg = "effect",
print_progress = FALSE){
# set observation/measurement times
if(is.null(obs_tms)) obs_tms <- seq(dt_obs, max(targets$time), dt_obs)
# set true and predicted initial concentrations if not specified
ncpt <- length(eval(formals(pkmod)$init))
if(is.null(init0)) init0 <- rep(0,ncpt)
if(is.null(init_p)) init_p <- rep(0,ncpt)
init_start <- init0
if(is.vector(updates)) updates <- data.frame(time = updates)
if(!("time" %in% names(updates))) stop("dataframe updates must have column named 'time'")
if(!("full_data" %in% names(updates))) updates$full_data <- FALSE
if(!("plot_progress" %in% names(updates))) updates$plot_progress <- FALSE
# add simulation start time to list of update times
update_tms <- c(sim_starttm, updates$time)
update_full <- c(NA, updates$full_data)
plot_progress <- c(NA, updates$plot_progress)
# combine update times into set of target times
na.locf <- function(x) {
v <- !is.na(x)
c(NA, x[v])[cumsum(v)+1]
}
targets_new <- data.frame(time = sort(union(targets$time, update_tms)))
targets_new <- merge(targets_new, targets, all.x = TRUE)
targets_new$target <- na.locf(targets_new$target)
true_pk <- unlist(true_pars$pars_pkpd[true_pars$pk_ix])
true_pd <- unlist(true_pars$pars_pkpd[-true_pars$pk_ix])
prior$pars_pkpd <- unlist(prior$pars_pkpd)
prior0 <- prior
dat0 <- NULL
lpr_all <- NULL
for(i in 2:length(update_tms)){
if(print_progress) print(paste("Updating at time t =", update_tms[i]))
prior_pk <- prior$pars_pkpd[prior$pk_ix]
prior_pd <- prior$pars_pkpd[prior$pd_ix]
# subset targets and observation times to period being updated
targets_sub <- targets_new[targets_new$time <= update_tms[i] & targets_new$time >= update_tms[i-1],]
obs_tms_sub <- obs_tms[obs_tms <= update_tms[i] & obs_tms > update_tms[i-1]]
# calculate tci infusions at prior parameter estimates for update period
inf <- tci_pd(pdresp  = targets_sub$target,
tms     = targets_sub$time,
pdinv   = pdinv,
pdmod   = pdmod,
pkmod   = pkmod,
pars_pk = prior_pk,
pars_pd = prior_pd,
init = init_p,
tci_alg = tci_alg)
# generate data under true model
dat <- gen_data(inf = inf,
tms = obs_tms_sub,
pkmod = pkmod,
pdmod = pdmod,
pars_pk0 = true_pk, # true pk parameters
pars_pd0 = true_pd, # true pd parameters
sigma_add = true_pars$err, # random error
delay = true_pars$delay, # bis delay in minutes
max_pdval = 100,
init = init0)
# merge sampled dataset with prior observations
dat0 <- combine_sim(dat0,dat)
# update parameters based on generated data
# use prior parameter values as starting point - separate fixed parameters
if(any(!is.null(prior$fixed_ix))){
lpr <- log(c(prior$pars_pkpd[-prior$fixed_ix], err = prior$err))
lpr_fixed <- log(prior$pars_pkpd[prior$fixed_ix])
} else{
lpr <- log(c(prior$pars_pkpd, err = prior$err))
lpk_fixed <- NULL
}
lpr_all <- rbind(lpr_all, lpr)
# indicate if full dataset should be used for updates
if(update_full[i]){
dat_eval <- dat0
# use full dataset and original vcov matrix
post_est <- optim(par = lpr,
fn = log_posterior_neg,
dat = dat_eval,
mu = lpr,
sig = prior0$sig,
pk_ix = prior$pk_ix,
pd_ix = prior$pd_ix,
fixed_ix = prior$fixed_ix,
fixed_lpr = lpr_fixed,
method = "BFGS",
hessian = FALSE)
} else{
dat_eval <- dat
post_est <- optim(par = lpr,
fn = log_posterior_neg,
dat = dat_eval,
mu = lpr,
sig = prior$sig,
pk_ix = prior$pk_ix,
pd_ix = prior$pd_ix,
fixed_ix = prior$fixed_ix,
fixed_lpr = lpr_fixed,
method = "BFGS",
hessian = TRUE)
# update vcov matrix
prior$sig <- solve(post_est$hessian)
}
if(plot_progress[i]){
print(plot(dat0, lpars_update = post_est$par,
lpars_fixed = log(prior$pars_pkpd[prior$fixed_ix])))
}
# update prior values
if(any(!is.null(prior$fixed_ix))){
prior$pars_pkpd[-prior$fixed_ix] <- exp(head(post_est$par,-1))
prior$err <- exp(tail(post_est$par,1))
} else{
prior$pars_pkpd <- exp(head(post_est$par,-1))
prior$err <- exp(tail(post_est$par,1))
}
# update true and predicted initial values
init0 <- dat0$sim[nrow(dat0$sim),grep("c[0-9]",colnames(dat0$sim))]
init_p <- as.numeric(predict(pkmod,
inf = dat0$inf,
tms = update_tms[i],
pars = prior$pars_pkpd[prior$pk_ix],
init = init_start)[-1])
}
# save final posterior parameter values
if(any(!is.null(prior$fixed_ix))){
lpr <- log(c(prior$pars_pkpd[-prior$fixed_ix], err = prior$err))
lpr_fixed <- log(prior$pars_pkpd[prior$fixed_ix])
} else{
lpr <- log(c(prior$pars_pkpd, err = prior$err))
lpk_fixed <- NULL
}
lpr_all <- rbind(lpr_all, lpr)
out <- list(dat = dat0,
lpr = lpr_all,
posterior = prior,
prior = prior0,
true_pars = true_pars)
class(out) <- "bayessim"
return(out)
}
bayes_sim <- bayes_control(targets = targets,
updates = update_times,
prior = prior_pars,
true_pars = true_pars)
plot(bayes_sim)
#' @param Cpt Target plasma concentration
#' @param pkmod PK model
#' @param dtm Duration of the infusion
#' @param maxrt Maximum infusion rate. Defaults to 200 ml/min in reference to the
#' maximum infusion rate of 1200 ml/h permitted by
#' existing TCI pumps (e.g. Anestfusor TCI program).
#' @param cmpt Compartment into which infusions are administered. Defaults to the first compartment.
#' @param ... Arguments passed on to pkmod.
#'
#' @export
tci_plasma <- function(Cpt, pkmod, dtm, maxrt = 1200, cmpt = 1, ...){
Cp1 <- pkmod(tm = dtm, kR = 1, ...)
Cp2 <- pkmod(tm = dtm, kR = 2, ...)
# for multi-compartment models, use only concentration in compartment 'cmpt'
if(!is.null(dim(Cp1))){
Cp1 <- Cp1[cmpt,]
Cp2 <- Cp2[cmpt,]
}
m <- Cp2 - Cp1
b <- Cp1 - m
infrt <- (Cpt - b) / m
if(infrt < 0)
infrt <- 0
if(infrt > maxrt)
infrt <- maxrt
return(unname(infrt))
}
#' @param dtm Frequency of TCI updates. Default is 1/6 minutes = 10 seconds.
#' @param ecmpt Effect site compartment number
#' @param tmax_search Outer bound on times searched to find a maximum concentration
#' following an infusion of duration dtm. Defaults to 20 minutes. May need to be increased
#' if a drug has a slow elimination rate.
#' @param maxrt Maximum infusion rate of TCI pump. Defaults to 1200.
#' @param grid_len Number of time points used to identify time of maximum concentration.
#' Can be increased for more precision.
#' @param ... Arguments used by pkmod.
#' @export
tci_effect <- function(Cet, pkmod, dtm = 1/6, ecmpt = NULL, tmax_search = 10,
maxrt = 1200, grid_len = 1200, ...){
list2env(list(...), envir = environment())
if(!("init" %in% ls())) init <- eval(formals(pkmod)$init)
if(is.null(pars)) pars <- try(eval(formals(pkmod)$pars),
silent = TRUE)
if(is.null(ecmpt)) ecmpt <- length(init)
if(class(pars) == "try-error")
stop("PK parameters must either be provided as arguments to the TCI algorithm or as defaults to the PK model.")
ecmpt_name <- paste0("c",ecmpt)
# infusions corresponding to unit infusion for duration dtm and a null infusion
unit_inf <- create_intvl(data.frame(time = c(dtm, tmax_search), infrt = c(1,0)))
null_inf <- create_intvl(data.frame(time = tmax_search, infrt = 0))
# predict concentrations with no additional infusions and starting concentrations
B <- function(tm)
predict(pkmod, inf = null_inf, pars = pars, init = init, tms = tm)[,ecmpt_name]
# predict concentrations with unit infusion and no starting concentrations
E <- function(tm)
predict(pkmod, inf = unit_inf, pars = pars, init = rep(0,length(init)), tms = tm)[,ecmpt_name]
# predict to find the longest time of maximum concentration
# this will always be shorter when any prior drug has been infused
grid_tmax <- seq(0,tmax_search,length.out = grid_len)
con_proj <- E(grid_tmax)
con_dif <- diff(con_proj)
while(all(con_dif > 0)){
tmax_search <- tmax_search*2
grid_tmax <- seq(0,tmax_search,length.out = grid_len)
con_proj <- E(grid_tmax)
con_dif <- diff(con_proj)
}
peak_ix <- min(which(diff(con_proj) < 0))
# peak_ix <- which.max(con_proj)
if(all(init == 0)){
kR <- Cet / con_proj[peak_ix]
} else{
tms <- seq(0, grid_tmax[peak_ix]+0.5, length.out = grid_len)
Bpred <- B(tms)
Epred <- E(tms)
peak_ix <- which.max(Epred)
jpeak1 <- tms[peak_ix]
jpeak0 <- tms[peak_ix-1]
iter = 0
while(jpeak0 != jpeak1){
if(iter > 100) stop("Effect-site TCI algorithm did not converge.")
jpeak0 = jpeak1
I0 = (Cet - Bpred[which(tms == jpeak0)]) / Epred[which(tms == jpeak0)]
jpeak1 = tms[which.max(Bpred + Epred*I0)]
iter = iter + 1
}
kR = unname((Cet-Bpred[which(tms == jpeak1)]) / Epred[which(tms == jpeak1)])
}
if(kR < 0) kR = 0
if(kR > maxrt) kR = maxrt
return(unname(kR))
}
theta <- c(v1 = 8.995, v2 = 17.297, v3 = 120.963, cl = 1.382,
q2 = 0.919, q3 = 0.609, ke0 = 1.289, c50 = 2.8, gamma = 1.47,
gamma2 = 1.89, e0 = 93, emx = 93, sigma = 8.03, bis_delay = 28.263)
kR_Cp <- tci_plasma(Cpt = 2, dtm = 1, pkmod = pkmod3cptm, pars = theta)
kR_Ce <- tci_effect(Cet = 2, dtm = 1, pkmod = pkmod3cptm, pars = theta)
kR_Cp
kR_Ce
print(round(c(kR_Cp = kR_Cp, kR_Ce = kR_Ce),2))
tolower("Ce50")
#' identifying the slope of the Emax curve at c50, E0 is the response value with no drug present,
#' Emx is the maximum effect size.
#' @param ce Vector of effect-site concentrations.
#' @param pars Named vector of parameter values with names (c50,gamma,e0,emx).
#' @examples
#' pars_emax <- c(c50 = 1.5, gamma = 1.47, e0 = 100, emx = 100)
#' ce_seq <- seq(0,4,0.1)
#' plot(ce_seq, emax(ce_seq, pars_emax), type = "l",
#' xlab = "Effect-site concentrtion (ug/mL)", ylab = "BIS")
#' @export
emax <- function(ce, pars)
#' identifying the slope of the Emax curve at c50, E0 is the response value with no drug present,
#' Emx is the maximum effect size.
#' @param ce Vector of effect-site concentrations.
#' @param pars Named vector of parameter values with names (c50,gamma,e0,emx).
#' @examples
#' pars_emax <- c(c50 = 1.5, gamma = 1.47, e0 = 100, emx = 100)
#' ce_seq <- seq(0,4,0.1)
#' plot(ce_seq, emax(ce_seq, pars_emax), type = "l",
#' xlab = "Effect-site concentrtion (ug/mL)", ylab = "BIS")
#' @export
emax <- function(ce, pars){
names(pars) <- tolower(names(pars))
if("ce50" %in% names(pars)) names(pars)[names(pars) == "ce50"] <- "c50"
pars["e0"] - pars["emx"]*(ce^pars["gamma"] / (ce^pars["gamma"] + pars["c50"]^pars["gamma"]))
}
#' @name inv_emax
#' @title Inverse Emax function
#' @description Inverse Emax function to return effect-site concentrations required to reach target effect.
#' @param pdresp PD response values
#' @param pars Named vector of parameter values with names (c50,gamma,E0,Emx).
#' @examples
#' pars_emax <- c(c50 = 1.5, gamma = 4, e0 = 100, emx = 100)
#' ce_seq <- seq(0,4,0.1)
#' all.equal(inv_emax(emax(ce_seq, pars_emax), pars_emax), ce_seq)
#' @export
inv_emax <- function(pdresp, pars){
names(pars) <- tolower(names(pars))
if("ce50" %in% names(pars)) names(pars)[names(pars) == "ce50"] <- "c50"
eff <- abs(pdresp - pars["e0"])
(eff*(pars["c50"]^pars["gamma"])/(pars["emx"]*(1-eff/pars["emx"])))^(1/pars["gamma"])
}
theta
theta0
theta
rbind(theta, theta0)
patient_tab <- rbind(theta, theta0)
round(rbind(theta, theta0),2)
patient_tab <- round(rbind(theta, theta0),2)
pkpd_vars_names <- c("$V_1$","$V_2$","$V_1$","$CL$","$Q_2$","$Q_3$","$K_{e0}$",
"$C_{e50}$","$E_0$","$E_{max}$","$\\gamma_1$","$\\gamma_2$",
"$\\sigma$","Delay")
colnames(patient_tab) <- pkpd_vars_names
patient_tab
rownames(patient_tab) <- c("$\theta$","$\theta_0$")
patient_tab
patient_tab
patient_tab <- rbind(pkpd_vars_names,round(rbind(theta, theta0),2))
patient_tab
pkpd_vars_names
pkpd_vars_names <- c("$V_1$","$V_2$","$V_3$","$CL$","$Q_2$","$Q_3$","$K_{e0}$",
"$C_{e50}$","$E_0$","$E_{max}$","$\\gamma_1$","$\\gamma_2$",
"$\\sigma$","Delay")
patient_tab <- rbind(pkpd_vars_names,round(rbind(theta, theta0),2))
patient_tab
pkpd_vars_names <- c("$V_1$","$V_2$","$V_3$","$CL$","$Q_2$","$Q_3$","$K_{e0}$",
"$C_{e50}$","$\\gamma_1$","$\\gamma_2$","$E_0$","$E_{max}$",
"$\\sigma$","Delay")
patient_tab <- rbind(pkpd_vars_names,round(rbind(theta, theta0),2))
colnames(patient_tab) <- pkpd_vars_names
pkpd_vars_names <- c("$V_1$","$V_2$","$V_3$","$CL$","$Q_2$","$Q_3$","$K_{e0}$",
"$C_{e50}$","$\\gamma_1$","$\\gamma_2$","$E_0$","$E_{max}$",
"$\\sigma$","Delay")
patient_tab <- rbind(pkpd_vars_names,round(rbind(theta, theta0),2))
patient_tab
rownames(patient_tab) <- c("","$\theta$","$\theta_0$")
patient_tab
# add top level header
top_header <- list()
top_header$pos <- list(0)
top_header$command <- "& \\multicolumn{7}{c}{PK parameters} & \\multicolumn{5}{c}{PD parameters} & \\multicolumn{2}{c}{Fixed}\\\\"
tab_patient_df <- xtable(patient_tab,
caption = "Predicted and true PK-PD parameters for an example 50 year old, 163 cm tall, male patient weighing 60 kg and with coadministration of opiates using the Eleveld PK-PD model. 'Predicted' values are expected parameter values at patient covariates. 'True' values are equal to predicted values with random effect terms drawn from a multivariate normal distribution describing interpatient variability.",
label = "tab:example_patient")
tab_patient_df
rownames(patient_tab) <- c("","$\\theta$","$\\theta_0$")
# add top level header
top_header <- list()
top_header$pos <- list(0)
top_header$command <- "& \\multicolumn{7}{c}{PK parameters} & \\multicolumn{5}{c}{PD parameters} & \\multicolumn{2}{c}{Fixed}\\\\"
tab_patient_df <- xtable(patient_tab,
caption = "Predicted and true PK-PD parameters for an example 50 year old, 163 cm tall, male patient weighing 60 kg and with coadministration of opiates using the Eleveld PK-PD model. 'Predicted' values are expected parameter values at patient covariates. 'True' values are equal to predicted values with random effect terms drawn from a multivariate normal distribution describing interpatient variability.",
label = "tab:example_patient")
tab_patient_df
print(tab_patient_df,
digits = 2,
include.rownames = FALSE,
caption.placement = "top",
timestamp = NULL,
booktabs = TRUE,
hline.after = c(-1,0,2),
sanitize.text.function = function(x){x})
print(tab_patient_df,
digits = 2,
include.rownames = TRUE,
caption.placement = "top",
timestamp = NULL,
booktabs = TRUE,
hline.after = c(-1,0,2),
sanitize.text.function = function(x){x},
include.colnames=FALSE,
add.to.row = top_header)
print(tab_patient_df,
digits = 2,
include.rownames = TRUE,
caption.placement = "top",
timestamp = NULL,
booktabs = TRUE,
hline.after = c(-1,0,1),
sanitize.text.function = function(x){x},
include.colnames=FALSE,
add.to.row = top_header)
print(tab_patient_df,
digits = 2,
include.rownames = TRUE,
caption.placement = "top",
timestamp = NULL,
booktabs = TRUE,
hline.after = c(-1,0,3),
sanitize.text.function = function(x){x},
include.colnames=FALSE,
add.to.row = top_header)
print(tab_patient_df,
digits = 2,
include.rownames = TRUE,
caption.placement = "top",
timestamp = NULL,
booktabs = TRUE,
hline.after = c(1,3),
sanitize.text.function = function(x){x},
include.colnames=FALSE,
add.to.row = top_header)
print(tab_patient_df,
digits = 2,
include.rownames = TRUE,
caption.placement = "top",
timestamp = NULL,
booktabs = TRUE,
hline.after = c(0,1,3),
sanitize.text.function = function(x){x},
include.colnames=FALSE,
add.to.row = top_header)
print(tab_patient_df,
digits = 2,
include.rownames = TRUE,
caption.placement = "top",
timestamp = NULL,
booktabs = TRUE,
hline.after = c(-1,1,3),
sanitize.text.function = function(x){x},
include.colnames=FALSE,
add.to.row = top_header)
